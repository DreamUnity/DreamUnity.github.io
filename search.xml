<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高项_第三章项目立项管理</title>
      <link href="/2022/08/23/gao-xiang-di-san-zhang-xiang-mu-li-xiang-guan-li/"/>
      <url>/2022/08/23/gao-xiang-di-san-zhang-xiang-mu-li-xiang-guan-li/</url>
      
        <content type="html"><![CDATA[<h1>第三章项目立项管理</h1><h2 id="甲方立项流程（掌握）">甲方立项流程（掌握）</h2><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项-第三章项目立项管理1.png" style="zoom:67%;"><h2 id="乙方立项流程（掌握）">乙方立项流程（掌握）</h2><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项-第三章项目立项管理2.png" style="zoom:67%;"><h2 id="立项管理内容（掌握）">立项管理内容（掌握）</h2><p>项目立项一般包括提交<mark>项目建议书、项目可行性研究、项目招标与投标</mark>等内容</p><h3 id="项目建议书（立项申请）">项目建议书（立项申请）</h3><p>是项目<mark>建设单位</mark>向上级主管部门提交项目申请时必须的文件，是对拟建项目提出的框架性的总体设想。</p><blockquote><p>核心内容：</p><ol><li class="lvl-3">项目的必要性</li><li class="lvl-3">项目的市场预测</li><li class="lvl-3">产品方案或服务的市场预测</li><li class="lvl-3">项目建设必需的条件</li></ol></blockquote><h3 id="项目可行性研究报告">项目可行性研究报告</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E9%AB%98%E9%A1%B9-%E7%AC%AC%E4%B8%89%E7%AB%A0%E9%A1%B9%E7%9B%AE%E7%AB%8B%E9%A1%B9%E7%AE%A1%E7%90%863.png" alt=""></p><h3 id="项目招投标">项目招投标</h3><h4 id="招标：公开招标、邀请招标、议标">招标：公开招标、邀请招标、议标</h4><ul class="lvl-0"><li class="lvl-2"><p>公开招标：招标人以<mark>招标公告</mark> 的方式邀请<mark>不特定</mark>的法人或者其他组织投标</p></li><li class="lvl-2"><p>邀请投标：招标人以招标邀请书的方式邀请<mark>特定</mark>的法人或者其他组织投标</p></li></ul><p>招标代理：招标人有权自行选择招标代理机构，委托其办理招标事宜，招标代理机构是依法设立从事招标大力业务并提供服务的社会中介组织。<mark>任何单位和个人不得以任何方式为招标人指定招标代理机构</mark></p><h4 id="投标：编织标书-递交标书-标书的签收">投标：编织标书-&gt;递交标书-&gt;标书的签收</h4><ol><li class="lvl-3"><p>编制标书：要求投标人提供一定比例或金额的投标保证金。</p></li><li class="lvl-3"><p>递交标书：按照规定的地点时间送达，直接送达/代理人送达直接获得回执。若按邮寄的方式，则在截止日期前送达，<mark>而不是以“邮戳为准”</mark>。</p><blockquote><p>应注意的问题，投标人在截止日期前，将投标文件送至投标地点。招标人收到后，不得开启。投标人少于三个时，重新招标。</p></blockquote></li><li class="lvl-3"><p>标书的签收：签收后不得开启，必需旅行完备的签收、登记和备案的手续。</p></li></ol><h4 id="评标">评标</h4><p>由高级委员会负责。</p><blockquote><p>评标委员会由具有高级职称或同等专业水平的技术、经济等相关领域专家、招标人和招标机构代表等<mark>5人以上单数</mark>组成，其中技术、经济等方面，专家人数<mark>不得少于成员总数的2/3</mark>。开标前，评标委员会名单在评标结果公示前必需保密。</p></blockquote><h4 id="选定项目承建方（掌握）">选定项目承建方（掌握）</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项-第三章项目立项管理4.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项-第三章项目立项管理5.png" style="zoom:67%;"><p>同时要通知未中标人，30日内签合同，15日内向有关部门提交报告</p><h2 id="可行性研究">可行性研究</h2><h3 id="可行性研究的内容">可行性研究的内容</h3><ol><li class="lvl-3"><p>技术可行性分析</p></li><li class="lvl-3"><p>经济可行性分析</p></li><li class="lvl-3"><p>运行环境可行性分析</p></li><li class="lvl-3"><p>其他方面的可行性分析</p></li></ol><p>技术可行性分析</p><ol><li class="lvl-3"><p>进行项目开发的风险：再给定的限制范围和时间期限内，能否设计出预期的系统并实现必需的功能和性能</p></li><li class="lvl-3"><p><mark>人力资源的有效性</mark>：可以用于项目开发的技术人员队伍是否可以简历，是否存在人力资源不足、技术能力欠缺等问题，是否可以在市场上或者通过培训获得所需要的熟练技术人员</p></li><li class="lvl-3"><p>技术能力的可能性：相关技术的发展趋势和当前所掌握的技术是否支持该项目的开发，市场上是否存在支持该技术的开发环境、平台和工具</p></li><li class="lvl-3"><p>物资（产品）的可用性：是否存在可以用于建立系统的其他资源，如一些设备以及可行的代替产品等</p></li></ol><h4 id="经济可行性分析">经济可行性分析</h4><ol><li class="lvl-3"><p>支出分析：一次性支出/非一次性支出</p></li><li class="lvl-3"><p>收益分析：直接受益、间接受益等</p></li><li class="lvl-3"><p>收益投资话、投资回收期分析：对投入产出进行对比分析，以确定项目的收益率和投资回收率等经济指标</p></li><li class="lvl-3"><p><mark>敏感性分析</mark>：当注入设备和软件配置、处理速度要求、系统的工作负荷类型和负荷量等关键性因素变化时，对支出和收益产生影响的估计</p></li></ol><h4 id="运行环境可行性">运行环境可行性</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项-第三章项目立项管理6.png" style="zoom:67%;"><h4 id="其他方面的可行性分析">其他方面的可行性分析</h4><p>法律可行性、社会可行性等方面的可行性分析</p><h3 id="可行性研究的步骤">可行性研究的步骤</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E9%AB%98%E9%A1%B9-%E7%AC%AC%E4%B8%89%E7%AB%A0%E9%A1%B9%E7%9B%AE%E7%AB%8B%E9%A1%B9%E7%AE%A1%E7%90%867.png" alt=""></p><h4 id="初步可行性研究">初步可行性研究</h4><p>可以形成<mark>初步可行性研究报告</mark></p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项-第三章项目立项管理8.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项-第三章项目立项管理9.png" style="zoom:67%;"><p>在这之前可进行项目<mark>机会研究</mark>，如果投资可能性已进行，那么可以省去</p><h4 id="辅助（功能）研究">辅助（功能）研究</h4><ol><li class="lvl-3"><p>包括项目的<mark>一个或几个方面</mark>，但不是<mark>所有方面</mark>，并且职能作为<mark>初步项目可行性研究、项目可行性研究和大规模投资建议</mark>的前提或辅助</p></li><li class="lvl-3"><p>辅助研究的内容是研究的性质和打算研究的项目各有不同，但由于其关系到<mark>项目的关键方面</mark>因此其结论应为随后的项目阶段指明方向</p></li></ol><h3 id="详细可行性研究">详细可行性研究</h3><p>机会研究、初步可行性研究、详细可行性研究、评估与决策是投资前期的四个阶段。其中前三个可以合并,但是<mark>详细可行性研究</mark>是不可或缺的。</p><p>最终提交的<mark>可行性研究报告</mark>将成为进行项目评估和决策的依据。</p><p>详细可行性研究的方法:经济评价法、市场预测法、投资估算法和增量净效益法</p><p>‼️开发总成本一般划分为四大类 :<mark>研发成本、行政管理费、销售和分销费用、财务费用和折旧</mark>。前三类成本的总和称为<mark>经营成本</mark>。</p><blockquote><p>所涉及到的内容（了解）</p><p>(1)概述<br>(2)需求确定<br>(3)现有资源、设施情况分析<br>(4)设计(初步)技术方案<br>(5)项目实施进度计划建议<br>(6)投资估算和资金筹措计划<br>(7)项目组织、人力资源、技术培训计划<br>(8 )经济和社会效益分析(效果评价)<br>(9 )合作/协作方式。</p></blockquote><h2 id="项目的评估与论证">项目的评估与论证</h2><h3 id="项目论证">项目论证</h3><p>“<mark>先论证，后决策</mark>”是现代项目管理的基本原则</p><blockquote><p>作用主要体现在：</p><p>( 1 )项目论证是确定项目是否实施的依据。<br>( 2 )项目论证是筹措资金、向银行贷款的依据。<br>( 3 )项目论证是编制计划、设计、采购、施工以及机构设备、资源配置的依据。<br>( 4 )项目论证是防范风险、提高项目效率的重要保证。</p></blockquote><p>项目论证应该是围绕着<mark>市场需求、开发技术、财务经济</mark>三个房main展开调查和分析，<mark>市场是前提、技术是手段、财务经济是核心</mark></p><h5 id="项目论证的阶段划分">项目论证的阶段划分</h5><p>分为：机会研究、初步可行性研究和详细可行性研究</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项-第三章项目立项管理10.png"><p>分为两种：内部论证和外部论证</p><h5 id="项目论证的一般程序">项目论证的一般程序</h5><p>项目论证是一个<mark>连续的过程</mark></p><blockquote><p>七个步骤</p><p>( 1 )<mark>明确</mark>项目范围和业主目标<br>( 2 )<mark>收集</mark>并分析相关资料<br>( 3 )<mark>拟定</mark>多种可行的能够相互替代的实施方案<br>( 4)<mark>多方案分析</mark>、比较。方案分析与比较阶段包括分析各个可行方案在技术上、经济上的优缺点<br>( 5 )<mark>选择最优</mark>方案进一 步详细全面地论证<br>( 6 )<mark>编制项目论证报告</mark>、环境影响报告书和采购方式审批报告。<br>( 7 )编制资金筹措计划和项目实施进度计划。</p></blockquote><h3 id="项目评估">项目评估</h3><p>项目评估指在项目可行性研究的基础上，由<mark>第三方</mark>(国家、银行或有关机构)根据国家颁布的政策、法规、方法、参数和条例等,从项目( 或企业)、国民经济、社会角度出发,对拟建项目建设的必要性、建设条件、生产条件、产品市场需求、工程技术、经济效益和社会效益等进行评价、分析和论证，进而判断其是否可行的一个评估过程。项目评估是项目投资前期进行决策管理的重要环节一其目的是审查项目可行性研究的可靠性、真实性和客观性，为银行的贷款决策或行政主管部i ]的审批决策提供科学依据。</p><p>项目评估的最终成果是<mark>项目评估报告</mark></p><p>论证时着重于<mark>听取各方专家意见</mark>，评估更强调得出<mark>权威的结论。</mark></p><blockquote><p>依据包括以下项目</p><p>(1)项目建议书及其批准文件<br>(2)项目可行性研究报告<br>(3)报送单位的申请报告及主管部门]的初审意见<br>(4)有关资源、配件、燃料、水、电、交通、通信、资金(包括外汇)等方面的协议文件<br>(5)必需的其他文件和资料</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 高级软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高级软考 </tag>
            
            <tag> 信息系统项目管理师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高项_第二章信息系统项目管理基础</title>
      <link href="/2022/08/19/gao-xiang-di-er-zhang-xin-xi-xi-tong-xiang-mu-guan-li-ji-chu/"/>
      <url>/2022/08/19/gao-xiang-di-er-zhang-xin-xi-xi-tong-xiang-mu-guan-li-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1>信息系统项目管理基础</h1><h2 id="项目管理基础">项目管理基础</h2><h3 id="项目的概念和特点（掌握）">项目的概念和特点（掌握）</h3><p>定义：项目是为提供一种<u>独特产品</u>、<u>服务</u>或<u>成果</u>所做的<u>临时性</u>努力</p><p>特点：</p><ol><li class="lvl-3"><p>临时性（一次性）：是指每一个项目都有确定的开始和结束日期</p></li><li class="lvl-3"><p>独特的产品、服务或成果：创造独特的可交付成果,如产品、服务或成果。</p></li><li class="lvl-3"><p>逐步完善：逐步完善味着分步、连续的积累。例如,在项目的早期,项目范围的说明是粗略的,随着项目团队对目标和可交付成果的理解更完整和深时,项目的范围也就更具体和详细</p></li><li class="lvl-3"><p>资源约束：每一-个项目都需要具备各种资源来作为实施的保证,而资源是有限的。所以,资源成本是项目成功实施的一个约束条件。</p></li><li class="lvl-3"><p>目的性:项目工作的目的在于得到特定的结果，即项目是面向目标的。</p></li></ol><blockquote><p>项目的目标特性:多目标性、优先性、层次性</p></blockquote><h3 id="项目的特点（掌握）">项目的特点（掌握）</h3><p>成功的三个约束：<mark>时间、成本、质量</mark>。但经常存在冲突</p><p>另一个主要的约束就是<mark>范围</mark>（哪些要做，哪些不做）</p><p>项目经理的责任就是在四个要素之间进行权衡以保证项目的成功。</p><h3 id="项目与日常运作的关系（了解）">项目与日常运作的关系（了解）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础1.png" style="zoom: 67%;"><h3 id="信息系统项目的特点（掌握）">信息系统项目的特点（掌握）</h3><p>典型的信息系统项目的特点：</p><ol><li class="lvl-3"><p>目标不明确</p></li><li class="lvl-3"><p>需求变化频繁</p></li><li class="lvl-3"><p>智力密集型</p></li><li class="lvl-3"><p>设计队伍庞大</p></li><li class="lvl-3"><p>设计人员高度专业化</p></li><li class="lvl-3"><p>涉及的承包商多</p></li><li class="lvl-3"><p>各级承包商分布在各地，相互联系复杂</p></li><li class="lvl-3"><p>系统集成项目中需要研制开发大量的软硬件系统</p></li><li class="lvl-3"><p>项目生命期通常较短</p></li><li class="lvl-4"><p>通常要采用大量的新技术</p></li><li class="lvl-4"><p>使用与维护的要求非常复杂</p></li></ol><h3 id="项目管理的定义（了解）">项目管理的定义（了解）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础2.png" style="zoom:67%;"><h2 id="项目管理知识体系（了解）">项目管理知识体系（了解）</h2><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础3.png" style="zoom:67%;"><h2 id="PRINCE2（了解）">PRINCE2（了解）</h2><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础4.png" style="zoom:67%;"><h2 id="项目组织结构（掌握）‼️">项目组织结构（掌握）‼️</h2><p>组织机构分类</p><ul class="lvl-0"><li class="lvl-2"><p>职能型组织</p></li><li class="lvl-2"><p>矩阵型组织（弱矩阵型组织、平衡矩阵型组织、强矩阵型组织）</p></li><li class="lvl-2"><p>项目型组织</p></li></ul><h3 id="组织结构对项目的影响（掌握）">组织结构对项目的影响（掌握）</h3><p>一端为职能型、另一端为项目型，中间是形形色色的矩阵型</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础5.png" style="zoom:67%;"><h3 id="职能型组织（掌握）‼️">职能型组织（掌握）‼️</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础6.png" style="zoom:67%;"><p>注：黑框代表了参与项目活动的员工、黄色框代表协调区间</p><p><mark>项目经理权利 &lt; 职能经理</mark></p><blockquote><p>优点：</p><ol><li class="lvl-3">强大的技术支持，便于知识、技能和经验的交流</li><li class="lvl-3">清晰的职业生涯晋升路线</li><li class="lvl-3">直线沟通、交流简单、责任和权限很清晰</li><li class="lvl-3">有利于重复性工作为主的过程管理</li></ol><p>缺点：</p><ol><li class="lvl-3"><p>职能利益优先于项目，具有狭隘性</p></li><li class="lvl-3"><p>组织横向之间的联系薄弱、部门间沟通、协调难度大</p></li><li class="lvl-3"><p>项目经理极小或缺少权利、权威</p></li><li class="lvl-3"><p>项目管理发屏方向不明，缺少项目基准等</p></li></ol></blockquote><h3 id="项目型组织（掌握）">项目型组织（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础7.png" style="zoom:67%;"><p><mark>项目经理权利 &gt; 职能经理</mark></p><blockquote><p>优点：</p><ol><li class="lvl-3">结构单一、责权分明，利于统一指挥</li><li class="lvl-3">目标明确单一</li><li class="lvl-3">沟通快捷、方便</li><li class="lvl-3">决策快</li></ol><p>缺点：</p><ol><li class="lvl-3"><p>管理成本高，如项目肚饿工作量不足则资源配置效率低</p></li><li class="lvl-3"><p>项目环境比较封闭，不利于沟通、技术知识等共享</p></li><li class="lvl-3"><p>员工缺乏事业上的连续性和保障等</p></li></ol></blockquote><h3 id="弱矩阵型组织（掌握）">弱矩阵型组织（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础8.png" style="zoom:67%;"><p><mark>项目经理权利 &lt; 职能经理</mark></p><h3 id="平衡矩阵型组织（掌握）">平衡矩阵型组织（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础9.png" style="zoom:67%;"><p><mark>项目经理权利 = 职能经理</mark></p><h3 id="强矩阵型组织（掌握）">强矩阵型组织（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础10.png" style="zoom:67%;"><p><mark>项目经理权限 &gt; 职能经理</mark></p><h3 id="复合型组织（了解）">复合型组织（了解）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础11.png" style="zoom:67%;"><p>项目成员尽量在物理上被安置于一处，集中办公</p><h3 id="优点和缺点（了解）">优点和缺点（了解）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础12.png" style="zoom:67%;"><h3 id="PMO项目管理办公室（了解）">PMO项目管理办公室（了解）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础13.png" style="zoom:67%;"><h2 id="信息系统项目的生命周期（了解）">信息系统项目的生命周期（了解）</h2><ol><li class="lvl-3"><p>项目的成本与人力投入在开始时较低，在工作执行期间达到最高，并在项目快要结束时迅速回落。</p></li></ol><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础14.png" style="zoom:80%;"><ol start="2"><li class="lvl-3"><p>风险与不确定性在项目最开始最大，并在项目的整个生命周期中随着决策的制定与可交付成果的验证而逐步降低</p></li></ol><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础15.png" style="zoom:80%;"><h3 id="瀑布模型（掌握）">瀑布模型（掌握）</h3><p>瀑布模型是一个经典的软件生命周期模型，一般将软件开发分为：可行性分析（计划）、需求分析、软件设计（该要设计、详细设计）、编码（含单元测试）、测试、运行维护等几个阶段</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础16.png" style="zoom:80%;"><blockquote><p>特点：</p><ol><li class="lvl-3">从上一项开发活动接受该项活动的工作对象作为输入</li><li class="lvl-3">利用这一输入，实施该项活动应完成的工作内容</li><li class="lvl-3">给出该项活动的工作成果，作为输出传给下一项开发活动</li><li class="lvl-3">对该项活动的实施工作成果进行评审</li></ol></blockquote><p><mark>瀑布模型适用于需求明确或很少变更的项目，如二次开发或者升级项目</mark></p><h3 id="螺旋模型（掌握）">螺旋模型（掌握）</h3><p>螺旋模型是一个演化软件过程模型，将原型实现的迭代特征与线性顺序（瀑布）模型中控制的和系统化的方面结合起来。使得软件的增量版本的快速开发成为可能。</p><p>在螺旋模型中，软件开发是一系列的增量发布。在早起的迭代中，发布的增量可能是一个纸上的模型或圆形；在以后的迭代中，被开发系统的更加完善的版本逐步产生</p><p>四个象限分别标志每个周期所划分的四个阶段：</p><ul class="lvl-0"><li class="lvl-2"><p>制定计划</p></li><li class="lvl-2"><p>风险分析</p></li><li class="lvl-2"><p>实施工程和客户评估</p></li></ul><p>螺旋模型强调了风险分析，特别适用于<mark>庞大而复杂</mark>的、<mark>高风险</mark>的系统。</p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E9%AB%98%E9%A1%B9_%E7%AC%AC%E4%BA%8C%E7%AB%A0%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%8017.png" alt=""></p><h3 id="迭代模型（掌握）">迭代模型（掌握）</h3><p>迭代式开发模型水平方向为时间维，分四个阶段：‼️</p><ul class="lvl-0"><li class="lvl-2"><p>初始</p></li><li class="lvl-2"><p>细化</p></li><li class="lvl-2"><p>构造</p></li><li class="lvl-2"><p>移交</p></li></ul><p>核心工作流从技术角度描述迭代模型的静态组成部分，包括：</p><p>业务建模、需求获取、分析与设计、实现、测试、部署</p><p>图中阴影部分描述了不同的工作流，在不同的时间段内工作量的不同，几乎所有的工作流在所有的时间段内均有工作量，只是大小不同而已。各阶段的主要任务如下：</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础18.png" style="zoom:80%;"><p>了解一下：</p><ol><li class="lvl-3"><p>初始阶段：系统地阐述项目的范围，选择可行的系统架构，计划和准备业务案例</p></li><li class="lvl-3"><p>细化阶段：细化构想，细化过程和基础设施，细化构架并选择构件</p></li><li class="lvl-3"><p>构造阶段：资源管理、控制和过程最优化，完成构件的开发并依评价标准进行测试可，依构想的验收标准评估产品的发布</p></li><li class="lvl-3"><p>移交阶段：同步并使并发的构造增量集成到一致的实施基线中，与实施有关的工程活动根据完整的构想和需求集的验收标准评估实施基线</p></li></ol><h3 id="V模型（掌握）">V模型（掌握）</h3><p>以测试为中心的开发模型，对应关系：</p><p>编码-单元测试、详细设计-集成测试、概要设计-系统测试、需求分析-验收测试</p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E9%AB%98%E9%A1%B9_%E7%AC%AC%E4%BA%8C%E7%AB%A0%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%8019.png" alt=""></p><blockquote><ol><li class="lvl-3"><p>V模型体现的主要思想是开发和测试同等重要，左侧代表的是开发活动，而右侧代表的是测试活动</p></li><li class="lvl-3"><p>V模型针对每个开发阶段，都有一个测试级别与之相对应</p></li><li class="lvl-3"><p>测试依旧是开发生命周期中的阶段，与瀑布模型不同的是，有多个测试级别与开发阶段对应</p></li><li class="lvl-3"><p>V模型适用于需求明确和需求变更不频繁的情形</p></li></ol></blockquote><h3 id="原型化模型（掌握）">原型化模型（掌握）</h3><p>原型法认为在很难一下子 全面准确地提出用户需求的情况下,首先不要求一定要对系统做全面、详细的调查、分析,而是本着开发人员对用户需求的初步理解,先快速开发一个原型系统,然后通过反复修改来实现用户的最终系统需求</p><blockquote><p>原型应当具备的特点如下：</p><ol><li class="lvl-3">实际可行</li><li class="lvl-3">具有最终系统的基本特征</li><li class="lvl-3">构造方便、快速，造价低</li></ol></blockquote><p>原型罚的特点在于原型罚对用户的需求是<mark>动态响应、逐步纳入</mark>的，系统分析、设计与实现都是随着对一个工作模型的不断修改而同时完成的，相互之间并无明显界限，也没有明确分工。系统开发阶段就是一个反复修改的过程。适于用户需求开始时定义不清、管理决策方法结构化程度不高的系统开发，开发方法更易被用户接受；但如果用户配合不好，盲目修改，就会延迟开发过程。</p><blockquote><p>可以将原型分类如下：</p><ol><li class="lvl-3">抛弃型原型</li><li class="lvl-3">进化型原型</li></ol></blockquote><h3 id="敏捷开发模型（掌握）">敏捷开发模型（掌握）</h3><p>以<mark>人为为核心</mark>、迭代、循序渐进的开发方法，相对于传统软件开发方法的“非敏捷”，更强调程序员团队与业务专家之间的紧密协作、面对面的沟通（认为比书面的文档更有效）、频繁交付新的软件版本、紧凑而自我组织型的团队，能够很好地适应需求变化的代码编写和团队组织方法，页更注重软件开发中人的作用。</p><p>Scrum是一种迭代式增量软件开发过程，通常用于敏捷软件开发。</p><h2 id="单个项目的管理过程组">单个项目的管理过程组</h2><p>项目管理各过程组成的5个过程组可以对应到PDCA，即戴明坏：</p><p>“计划(Plan) - 执行(Do) - 检查(Check) - 行动(Act)“</p><p>循环。该循环各环节以结果相连，该循环一部分的结果变成了另一部分的依据。</p><ul class="lvl-0"><li class="lvl-2"><p>计划（Plan）：包括方针的目标的确定，以及活动规划的制定。</p></li><li class="lvl-2"><p>执行（Do）：根据已知的信息设置具体的方法、方案和计划布局、根据设计和布局，进行具体运作，实现计划中的内容</p></li><li class="lvl-2"><p>检查（Check）：总结执行计划的结果，愤青哪些是对的那些是错的，明确效果，找出问题</p></li><li class="lvl-2"><p>行动（Act）：对检查的结果进行处理，对成功的经验加以肯定，并予以标准化，对于失败的教训也要总结引起重视。</p></li></ul><p>计划-规划过程、执行过程-执行、监控过程-检查/行动</p><h3 id="项目管理过程组（掌握）">项目管理过程组（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高项_第二章信息系统项目管理基础20.png" style="zoom:67%;"><h3 id="五大过程（掌握）">五大过程（掌握）</h3><ol><li class="lvl-3"><p>启动过程：设定项目目标，让项目团队有事儿可做</p></li><li class="lvl-3"><p>规划过程：制定工作路线，让项目团队“有法可依”</p></li><li class="lvl-3"><p>执行过程：“按图索骥”，让项目团队“有法必依”</p></li><li class="lvl-3"><p>监控过程：测量项目绩效，让项目团队“违法必究”，并且尽量做到“防患于未然”</p></li><li class="lvl-3"><p>收尾过程：了结项目（阶段）“恩怨”，让一切圆满。</p></li></ol><h3 id="十大知识领域（掌握）">十大知识领域（掌握）</h3><ol><li class="lvl-3"><p>整体管理：犹如项链中的那根线</p></li><li class="lvl-3"><p>范围管理：做且只做该做的事儿</p></li><li class="lvl-3"><p>时间管理：让一切按既定的进度进行</p></li><li class="lvl-3"><p>成本管理：算准钱和花好钱</p></li><li class="lvl-3"><p>质量管理：目的是满足需求</p></li></ol><h3 id="47个过程（掌握）">47个过程（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E9%AB%98%E9%A1%B9_%E7%AC%AC%E4%BA%8C%E7%AB%A0%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%8021.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 高级软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高级软考 </tag>
            
            <tag> 信息系统项目管理师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高项_第一章课后习题第一章</title>
      <link href="/2022/08/16/gao-xiang-di-yi-zhang-ke-hou-xi-ti/"/>
      <url>/2022/08/16/gao-xiang-di-yi-zhang-ke-hou-xi-ti/</url>
      
        <content type="html"><![CDATA[<h1>高级软考项目管理课第一章后习题</h1><h2 id="第一章-信息化和信息系统">第一章 信息化和信息系统</h2><h3 id="1-1-信息系统与信息化">1.1 信息系统与信息化</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题1.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题2.png" style="zoom:67%;"><p>C 没有金土</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题3.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题4.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题5.png" style="zoom:67%;"><p>A.全体社会成员</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题6.png" style="zoom:67%;"><p>D 系统规划：写报告｜｜系统分析：逻辑模型｜｜系统设计：物理模型</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题7.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题8.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题9.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题10.png" style="zoom:67%;"><p>A  开发：分析、设计、实施、运行和维护、消亡</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题11.png" style="zoom:67%;"><p>A 组织战略管理中的事儿</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题12.png" style="zoom:67%;"><p>B：鹰头</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题13.png" style="zoom:67%;"><p>B</p><h3 id="1-2-信息系统开发方法">1.2 信息系统开发方法</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题14.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题15.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题16.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题17.png" style="zoom:67%;"><p>A 程序流图与数据流图属于结构化方法中的工具</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题18.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题19.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题20.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题21.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题22.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题23.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题24.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题25.png" style="zoom:67%;"><p>D</p><h3 id="1-3-常规信息系统集成技术">1.3 常规信息系统集成技术</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题26.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题27.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题28.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题29.png" style="zoom:67%;"><p>D、A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题30.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题31.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题32.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题33.png" style="zoom:67%;"><p>B 层次化网络设计方案：核心层、汇聚层、接入层</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题34.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题35.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题36.png" style="zoom:67%;"><p>B A:DAS C:NAS D:SAN</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题37.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题38.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题39.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题40.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题41.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题42.png" style="zoom:67%;"><p>D LAN局域网 MAN城域网 WAN广域网</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题43.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题44.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题45.png" style="zoom:67%;"><p>B 让两个保持会话</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题46.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题47.png" style="zoom:67%;"><p>B， C是有线</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题48.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题49.png" style="zoom:67%;"><p>B 通过网线</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题50.png" style="zoom:67%;"><p>C 数据链路层</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题51.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题52.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题53.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题54.png" style="zoom:67%;"><p>A 核心层高速的转发通信</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题55.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题56.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题57.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题58.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题59.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题60.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题61.png" style="zoom:67%;"><p>A B:ISDN、DDN C:交换机、网桥 D:交换机、网桥</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题62.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题63.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题64.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题65.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题66.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题67.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题68.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题69.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题70.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题71.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题72.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题73.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题74.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题75.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题76.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题77.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题78.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题79.png" style="zoom:67%;"><p>B</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题80.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题81.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题82.png" style="zoom:67%;"><p>A 可用性公式： 10000 / (10000+1) * 100%</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题83.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题84.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题85.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题86.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题87.png" style="zoom:67%;"><p>A</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题88.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题89.png" style="zoom:67%;"><p>D</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题90.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题91.png" style="zoom:67%;"><p>C</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/高级软考项目管理课后习题92.png" style="zoom:67%;"><p>C</p>]]></content>
      
      
      <categories>
          
          <category> 高级软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高级软考 </tag>
            
            <tag> 信息系统项目管理师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高项_第一章信息化和信息系统</title>
      <link href="/2022/08/15/gao-xiang-di-yi-zhang-xin-xi-hua-he-xin-xi-xi-tong/"/>
      <url>/2022/08/15/gao-xiang-di-yi-zhang-xin-xi-hua-he-xin-xi-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1>高项_第一章信息化和信息系统</h1><h2 id="信息系统与信息化">信息系统与信息化</h2><h3 id="信息的特性（掌握）">信息的特性（掌握）</h3><p>其中只需掌握</p><ol><li class="lvl-3"><p>动态性：随时时间变化而变化</p></li><li class="lvl-3"><p>依附性：一方面，信息是客观世界的反应，由客观事物产生，不存在无源的信息。另一方面，信息都要衣服一定载体，需要物质的承担者，信息不能完全脱离物质而独立存在。</p></li><li class="lvl-3"><p>传递性：在<mark>时间</mark>上的传递就是<mark>存储</mark>，在<mark>空间</mark>上的传递就是<mark>转移或扩散</mark></p></li></ol><h3 id="信息的质量属性（掌握）">信息的质量属性（掌握）</h3><ol><li class="lvl-3"><p>精确性：对事物状态描述的<mark>精细</mark>程度</p></li><li class="lvl-3"><p>完整性：描述的全面程度，完整的信息应该包括所有重要事实</p></li><li class="lvl-3"><p>可靠性：来源、采集方法、传输过程都是<mark>可信任的</mark>，符合预期</p></li><li class="lvl-3"><p>及时性：获得时刻与发生时刻的<mark>间隔长短</mark></p></li><li class="lvl-3"><p>经济型：获取、传输带来的<mark>成本</mark>在可以接受的范围内</p></li><li class="lvl-3"><p>可验证性：主要质量属性可以被证实或者证伪的策划高难度</p></li><li class="lvl-3"><p>安全性：在信息的生命周期中，信息可以背飞授权访问的可能性，越低越安全</p></li></ol><h3 id="信息传输模型">信息传输模型</h3><p><mark>信息的传输技术</mark>是信息技术的<mark>核心</mark>。</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统1.png" style="zoom:67%;"><ol><li class="lvl-3"><p>信源：产生信息的尸体，由它向外传播，如qq使用者</p></li><li class="lvl-3"><p>信宿：信息的归宿或接收者，如使用qq的另一方</p></li><li class="lvl-3"><p>信道：传输信息的通道，如<mark>TCP/IP网络</mark></p></li><li class="lvl-3"><p>编码器：对编码信息进行加密再编码，如<mark>量化器、压缩编码器、调制器</mark>等</p></li><li class="lvl-3"><p>译码器，把信道上送来的信号（原始信息与噪声的叠加）转换成信宿能接受的信号，可包括<mark>解调器、译码器、数模转换器</mark>等</p></li><li class="lvl-3"><p>噪声：干扰可以来自于信息系统分层结构中的任何一层，一定大时，传输的信息可以背噪声掩盖导致传输失败</p></li></ol><h3 id="信息化的五个层次（掌握）">信息化的五个层次（掌握）</h3><p>由小到大</p><ol><li class="lvl-3"><p>产品信息化：是信息化的基础</p></li><li class="lvl-3"><p>企业信息化：企业在产品的设计、开发、生产、管理、经营等多个环节中广泛应用信息技术，如：生产制造系统、ERP、CRM、SCM等</p></li><li class="lvl-3"><p>产业信息化</p></li><li class="lvl-3"><p>国民经济信息化</p></li><li class="lvl-3"><p><mark>社会生活信息化</mark>，如智慧城市、互联网金融</p></li></ol><h3 id="信息化（了解）">信息化（了解）</h3><p>信息化的：</p><ul class="lvl-0"><li class="lvl-2"><p>主体：全社会成员</p></li><li class="lvl-2"><p>手段：基于现代信息技术的先进社会生产工具</p></li><li class="lvl-2"><p>途径：创建时代的社会生产力，推动社会生产关系及社会上层建筑的改革</p></li><li class="lvl-2"><p>目标：使国家的综合实力，社会文明素质和人民生活质量全面提升</p></li></ul><h3 id="两网、一站、四库、十二金（了解）">两网、一站、四库、十二金（了解）</h3><ul class="lvl-0"><li class="lvl-2"><p>”两网“：政务内网、政务外网</p></li><li class="lvl-2"><p>”一站“：政府门口网站</p></li><li class="lvl-2"><p>”四库“：建立人口、法人单位、空间地理和自然资源、宏观经济 等四个基础数据库</p></li><li class="lvl-2"><p>”十二金”：重点推进办公业务资源系统等十二个业务系统：</p><blockquote><p>金宏工程、金税工程、金关工程、金财工程、金融监管工程、金卡工程、金审工程、金盾工程、金保工程、金农工程、金水工程、金质工程</p></blockquote></li></ul><h3 id="信息化体系六要素（掌握）">信息化体系六要素（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统2.png" style="zoom:67%;"><ol><li class="lvl-3"><p>信息资源：其开发和应用是国家信息化的<mark>核心任务</mark></p></li><li class="lvl-3"><p>信息网络：是信息资源开发和利用的<mark>基础设施</mark></p></li><li class="lvl-3"><p>信息技术应用：是指把信息技术广泛应用于经济和社会各个领域，他直接反应了效率、效果、效益。信息技术应用是信息化体系六要素中的<mark>龙头</mark>,是国家信息化建设的<mark>主阵地</mark></p></li><li class="lvl-3"><p>信息技术与产业：是信息化的<mark>物质基础</mark></p></li><li class="lvl-3"><p>信息化人才：是信息化的<mark>成功之本</mark></p></li><li class="lvl-3"><p>信息化政策法规和标准规范：信息化政策和法规、标准、规范用于规范和协调信息化体系要素之间的关系,是国家信息化快速,有序,健康和持续发展的<mark>保障</mark>。</p></li></ol><h3 id="信息系统的生命周期（掌握）">信息系统的生命周期（掌握）</h3><p>四大五小</p><p>4大：立项、开发、运维、消亡</p><p>5小：系统规划、系统分析、系统设计、系统实施、运行维护</p><ol><li class="lvl-3"><p>立项（系统规划）：确定信息系统的发展战略，对建设信息系统的要求做出分析和预测，写成可行性报告</p></li><li class="lvl-3"><p>开发</p><ul class="lvl-2"><li class="lvl-5">系统分析：确定信系统的基本目标和逻辑功能要求，即提出<mark>逻辑模型</mark></li><li class="lvl-5">系统设计：具体设计实现逻辑模型的技术方案，即设计新系统的<mark>物理模型</mark></li><li class="lvl-5">系统实施：将设计的系统付诸实施的阶段，买东西</li><li class="lvl-5">系统运行和维护阶段：需要经常进行维护和评价，记录系统运行的情况</li><li class="lvl-5">消亡阶段</li></ul></li></ol><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统3.png" style="zoom:67%;"><h2 id="信息化系统的开发方法">信息化系统的开发方法</h2><blockquote><ul class="lvl-1"><li class="lvl-2"><p>结构化开发方法</p></li><li class="lvl-2"><p>面向对象方法</p></li><li class="lvl-2"><p>原型化方法</p></li><li class="lvl-2"><p>面向服务的开发方法</p></li></ul></blockquote><h3 id="结构化方法（掌握）">结构化方法（掌握）</h3><p>精髓：<mark>自顶向下，逐步求精和模块化设计</mark>，社和鱼数据处理领域，不适合规模大、复杂的系统开发</p><blockquote><p>特点是：</p><ul class="lvl-1"><li class="lvl-2">开发目标清晰化</li><li class="lvl-2">开发工作阶段话</li><li class="lvl-2">开发文档规范化</li><li class="lvl-2">设计方法结构化</li></ul><p>缺点是：</p><ul class="lvl-1"><li class="lvl-2"><p>开发周期长</p></li><li class="lvl-2"><p>难以适应需求变化</p></li><li class="lvl-2"><p>很少考虑数据结构</p></li></ul></blockquote><h3 id="面向对象方法（掌握）">面向对象方法（掌握）</h3><p>当前一些大型信息系统的开发，将结构化和oo方法相结合（面向对象）</p><p>首先，使用结构化方法进行自顶向下的整体划分</p><p>然后，自底向上地采用oo方法进行开发</p><blockquote><p>优点：</p><ul class="lvl-1"><li class="lvl-2">符合人类思维</li><li class="lvl-2">普遍适用于各类信息系统的开发</li><li class="lvl-2">构造的系统复用性好</li></ul></blockquote><h3 id="原型化方法（了解）">原型化方法（了解）</h3><p>实现用户需求的信息系统快速的开发方法。优点在缺有效地确认用户需求，<mark>适用于那些需求不明确的系统开发</mark></p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统4.png" style="zoom:67%;"><blockquote><p>特点：</p><ul class="lvl-1"><li class="lvl-2">使周期缩短，成本和风险降低，速度加快，获得较高的综合开发收益</li><li class="lvl-2">以用户为中西开发，提高了系统开发的成功率</li><li class="lvl-2">用户对系统的功能和结构容易理解和接受，有利于系统的移交及运行维护</li></ul><p>缺点：</p><ul class="lvl-1"><li class="lvl-2"><p>开发环境要求高</p></li><li class="lvl-2"><p>管理水平要求高</p></li></ul></blockquote><h3 id="面向服务的方法（掌握）">面向服务的方法（掌握）</h3><p>进一步将接口的定义与实现进行解耦，催生了服务和面向服务的开发方法</p><p><mark>提高系统可服用行、信息资源共享、系统之间的互操作性</mark></p><p>oo的应用构建在类和对象之.上,随后发展起来的建模技术将相关对象按照<mark>业务</mark>功能进行分组,就形成了<mark>构件</mark>(Component)的概念。对于跨构件的功能调用则采用接口的形式暴露出来。</p><p>进一步将接口的定义与实现行解耦，催生了<mark>服务和面向服务</mark>的开发方法</p><h2 id="常规信息系统集成技术">常规信息系统集成技术</h2><h3 id="OSI-Open-System-Interconnection-Model-七层网络模型（掌握）">OSI(Open System Interconnection Model)七层网络模型（掌握）</h3><table><thead><tr><th style="text-align:center">层</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">应用层</td><td style="text-align:left">负责对软件提供接口以使程序能使用网络服务,如事务处理程序、文件传送协议和网络管理等</td></tr><tr><td style="text-align:center">表示层</td><td style="text-align:left">如同应用程序和网络之间的<mark>翻译官</mark>，在表示层，数据将按照网络能理解的方案进行格式化。表示层管理数据的<mark>解密加密数据转换、格式化和文本压缩</mark></td></tr><tr><td style="text-align:center">会话层</td><td style="text-align:left"><mark>负责在网络中的两节点之间建立和维持通信，以及提供交互会话的管理功能</mark>,如三种数据流方向的控制，即一路交互、两路交替和两路同时会话模式</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:left">负责确保数据可靠、顺序、无错地从A点传输到B点。如<mark>提供建立、维护和拆除传送连接的功能;选择网络层提供最合适的服务;在系统之间提供可靠的透明的数据传送,提供端到端的错误恢复和流量控制</mark></td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:left">主要功能是将<mark>网络地址(例如，IP地址)翻译成对应的物理地址(例如,网卡地址)并决定如何将数据从发送方路由到接收方</mark>;网络层还可以实现<mark>拥塞控制、网际互连</mark>等功能</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:left">它控制网络层与物理层之间的通信。它的主要功能是将从网络层接收到的数据分割成特定的可被物理层传输的帧。该层的作用包括:<mark>物理地址寻址、数据的成帧、流量控制、数据的检错、重发</mark>等纠错功能</td></tr><tr><td style="text-align:center">物理层</td><td style="text-align:left">该层包括<mark>物理连网媒介</mark>，如电缆连线连接器。该层的协议产生并检测电压以便发送和接收携带数据的信号</td></tr></tbody></table><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统5.png" style="zoom:67%;"><blockquote><p>助记：</p><p>物理层：不大于F8的数字</p><p>链路层：让老婆去ATM取802块钱，回家打老婆屁屁，混蛋老婆</p><p>网络层：都有4个都包括IP，ARP，RARP例外</p><p>传输层：都有P</p><p>会话层：RSN 认识你</p><p>表示层：主要都是一些图片/视频的格式</p><p>应用层：都带T，TP</p></blockquote><h4 id="IEEE802规范（掌握）">IEEE802规范（掌握）</h4><ul class="lvl-0"><li class="lvl-2"><p>IEEE 802.3 以太网的CSMA/CD载波监听多路访问/冲突检测协议，<mark>（有线）局域网协议</mark></p></li></ul><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统6.png" style="zoom:67%;"><ul class="lvl-0"><li class="lvl-2"><p>IEEE 802.11 <mark>无线局域网协议</mark></p></li></ul><h4 id="应用层协议（掌握）">应用层协议（掌握）</h4><p>TCP/IP中包括4层，与OSI有对应关系</p><blockquote><ol><li class="lvl-3"><p>应用层：应用层、表示层、会话层</p></li><li class="lvl-3"><p>传输层</p></li><li class="lvl-3"><p>网络层</p></li><li class="lvl-3"><p>网络接口层：数据链路层、物理层</p></li></ol></blockquote><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统7.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统8.png" style="zoom:67%;"><h4 id="传输层协议（掌握）">传输层协议（掌握）</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统9.png" style="zoom:67%;"><h4 id="网络层协议（掌握）">网络层协议（掌握）</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统10.png" style="zoom:67%;"><h3 id="网络设备（了解）">网络设备（了解）</h3><p>根据交换层次不同，网络交互可分为</p><p>物理交互（电话网）</p><p>链路层交互（二次交换、对MAC地址进行变更）</p><p>网络层交换（三层交换、对IP地址进行变更）</p><p>传输层交换（四层交换、对端口进行变更，比较少见）和应用层变更。</p><hr><p>网络互联设备中有</p><p>中继器（实现物理层协议转换，在电缆间转换二进制信号）</p><p>网桥（实现物理层和数据链路层协议转换）</p><p>路由器（实现网络层协议和以下各层协议的转换）</p><p>网关（提供从最底层到传输层或以上各层的协议转换）</p><p>交换机</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统11.png" style="zoom:67%;"><h3 id="网络存储技术（掌握）">网络存储技术（掌握）</h3><p>主流的存储技术主要有</p><ul class="lvl-0"><li class="lvl-2"><p>直接DAS（Direct Attached Storage,DAS)，存储设备通过SCSI电缆连接到服务器</p></li><li class="lvl-2"><p>网络附加存储（Network Attached Storage,NAS）存储，通过网络接口与网络直接链接，用户通过网络访问，支持<mark>即插即用</mark>，NAS技术支持多种<mark>TCP/IP</mark>网络协议，主要是<mark>NFS</mark>(网络文件存储系统)和<mark>CIFS</mark>(通用Internet文件)来进行文件访问。</p></li><li class="lvl-2"><p>存储区域网络（Storage Area Network,SAN），SAN是通过专用交换机将磁盘阵列与服务器连接起来的高速专用子网，没有采取文件共享的存取方式，而是<mark>采用块（block）级别</mark>存储。根据传输过程采用的协议，技术划分为。</p><ul class="lvl-2"><li class="lvl-4">SC SAN，光纤通道的主要特性有：热插拔、高速贷款、远程连接、连接数量大、成本高</li><li class="lvl-4">IP SAN，基于IP网络实现数据块级别存储方式的存储网络，成本低，实现技术比较低</li><li class="lvl-4">IB SAN，是一种交换结构I/O技术，其设计思路是通过一套中心机构，在远程存储器、网络以及服务器等设备之间建立一个单一的连接链路，并由IB交换机来指挥流量。</li></ul></li></ul><h3 id="网络接入技术（了解）">网络接入技术（了解）</h3><p>两大类别：有线、无限</p><p>有线：PSTN、ISDN、ADSL、FTTX+LAN、HFC</p><p>无线：GPRS、3G、4G，无线电波为信息传输媒介，主要技术有4g、WIFI</p><p>5G速率10Gbps</p><h3 id="网络规划与设计（掌握）">网络规划与设计（掌握）</h3><p>信息安全的基本要素：机密性、完整性、可用性、可控性、可审查性</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统12.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统13.png" style="zoom:67%;"><h3 id="数据库（了解）">数据库（了解）</h3><ul class="lvl-0"><li class="lvl-2"><p>关系型数据库：</p><ul class="lvl-2"><li class="lvl-4">Oracle</li><li class="lvl-4">MySql</li><li class="lvl-4">SQLServer</li></ul></li><li class="lvl-2"><p>非关系型数据库：</p><ul class="lvl-2"><li class="lvl-4">MongDB</li></ul></li></ul><h3 id="数据仓库（掌握）">数据仓库（掌握）</h3><p>面向主题的、集成的、非易失的、且随时间变化的数据集合，<mark>用于支持管理决策</mark>。</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统14.png" style="zoom:67%;"><ul class="lvl-0"><li class="lvl-2"><p>数据源：数据仓库的基础，是数据源泉</p></li><li class="lvl-2"><p>数据的存储与管理：是整个系统数据仓库系统的核心</p></li><li class="lvl-2"><p>OLAP（Online analytical processing，联机分析处理）服务器：对分析需要的数据进行有效集成，按多位模型予以组织，以便进行多角度、多层次的分析，并发现趋势。</p></li><li class="lvl-2"><p>前端工具：主要包括各种查询工具，报表工具，分析工具，数据挖掘工具以及各种机遇数据仓库或者数据集的应用开发工具。其中数据分析工具主要针对OLAP，报表工具，数据挖掘工具主要针对数据仓库。</p></li></ul><h3 id="中间件（了解）">中间件（了解）</h3><h4 id="中间件的定义">中间件的定义</h4><p>一个分布式系统环境中处于操作系统与应用之间的软件</p><blockquote><p>中间件是一个独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源。中间件位于客户机服务的操作系统之上，管理计算机资源和网络通信。</p></blockquote><h4 id="中间件分类">中间件分类</h4><p>中间件分类有很多方式和很多种类型。从底向.上从中间件的层次来划分,可分为底层型中间件、通用型中间件和集成型中间件三个大的层次。</p><ol><li class="lvl-3"><p>底层型中间件的主流技术有JVM(Java虚拟机)、CLR(公共语言运行库)、ACE(自适配通信环境)、JDBC(Java 数据库连接)和ODBC(开发数据库互连)等,代表产品主要有sUN JVM和Microsoft CLR等。</p></li><li class="lvl-3"><p>通用型中间件的主流技术有CORBA(公共对象请求代理体系结构)、J2EE、MOM(面向消息的中间件)和COM等,代表产品主要有I0NAOrbk、BEAWebLogic和IBM MQSeries等。</p></li><li class="lvl-3"><p>集成型中间件的主流技术有WorkFlow和EAI(企业应用集成)等, 代表作品主要有BEA WebLogic和IBM WebSphere等。</p></li></ol><h3 id="可用性和可靠性（了解）">可用性和可靠性（了解）</h3><p>可用性：系统能够正常运行的时间比例，经常用两次故障之间的时间长度或在出现故障时系统能够恢复正常的速度来表示</p><p>可靠性：软件系统在应用或系统错误面前，在意外或错误使用的情况下维持软件系统的功能特性的基本能力，即容错性，健壮性</p><hr><p>可用性度量：无故障时间/(无故障时间+故障恢复时间)*100%。</p><p>所以提高一个系统的可用性，要么提高系统的单词正常工作时长，要么减少故障修复时间，常用的可用方法如下：</p><ol><li class="lvl-3"><p><mark>错误检测</mark>：用于错误检测的战术包括<mark>命令/响应、心跳和异常</mark></p></li><li class="lvl-3"><p><mark>错误恢复</mark>：用于错误恢复的战术包括<mark>表决、主动冗余、被动冗余</mark></p></li><li class="lvl-3"><p><mark>错误预防</mark>：用于错误防范的战术包括<mark>把可能出错的组件从服务中删除，引入进程监控器</mark></p></li></ol><h2 id="软件工程">软件工程</h2><h3 id="需求分析（掌握）">需求分析（掌握）</h3><ul class="lvl-0"><li class="lvl-2"><p>业务需求：反映企业或客户对系统高层次的一个目标追求。通常来自于项目投资人、购买产品的客户、客户单位的管理人员、市场营销部门或产品策划部门等。</p></li><li class="lvl-2"><p>用户需求：用户的具体的目标。或者用户要求系统必须能完成的任务，用户需求描述了用户能让系统做什么。</p></li><li class="lvl-2"><p>系统需求：从系统的角度来说明软件的需求，包括功能需求，非功能需求和设计约束</p></li></ul><h3 id="质量功能部署（了解）">质量功能部署（了解）</h3><p>质量功能部署( QFD)是一种将用户需求转化成软件需求的技术,其目的是最大限度地提升软件工程过程中用户的满意度。QFD将软件需求分为三类:<mark>常规需求、期望需求、意外需求。</mark></p><ol><li class="lvl-3"><p>常规需求,用户认为系统应该实现的功能或性能,实现越多用户会越满意。</p></li><li class="lvl-3"><p>期望需求，用户想当然以为系统应用具备的功能或性能,但并不能正确描述自己想要得到的这些功能或性能需求。如果期望需求没有得到实现,会让用户感到不满意。</p></li><li class="lvl-3"><p>意外需求,也称为兴奋需求,是用户要求范围外的功能或性能。</p></li></ol><h3 id="需求分析（了解）">需求分析（了解）</h3><p>常用的需求获取方法包括:用户访谈、调查问卷、采样、情节串联板、联合需求计划等。一个好的需求应该具有无二义性，完整性，一致性，可测试性，确定性，可跟踪性，正确性，必要性等特性。因此，需要分析人员把杂乱无章的用户要求和期望转换为用户需求,这就是需求分析的工作。</p><h3 id="SA方法进行需求分析（掌握）">SA方法进行需求分析（掌握）</h3><p>结构化分析SA（System Analysis）方法进行需求分析的核心是<mark>数据字典</mark></p><p>模型：</p><ul class="lvl-0"><li class="lvl-2"><p>数据模型：<mark>实体联系图</mark>（E-R图）描述实体、属性、以及实体之间的关系</p></li><li class="lvl-2"><p>功能模型：<mark>数据流图</mark>（DFD）从数据传递和加工的角度，利用图形符号通过逐层 细分描述系统内各个部件的功能和数据在它们之间传递的情况，来说明系统所完成的功能</p></li><li class="lvl-2"><p>行为模型：<mark>状态转换图</mark>（STD）通过描述系统的状态 和引起系统状态转换的时间，来表示系统的行为，指出作为特定时间的结果将执行那些动作（例如，处理数据等）</p></li></ul><h3 id="需求规格说明书（SRS）（掌握）">需求规格说明书（SRS）（掌握）</h3><p>SRS（Software Requirement Specification）是需求开发活动的产物，其中规定SRS应该包含以下内容：</p><ol><li class="lvl-3"><p>范围</p></li><li class="lvl-3"><p>引用文件</p></li><li class="lvl-3"><p>需求</p></li><li class="lvl-3"><p>合格性规定</p></li><li class="lvl-3"><p>需求可追踪性</p></li><li class="lvl-3"><p>尚未解决的问题</p></li><li class="lvl-3"><p>注解</p></li><li class="lvl-3"><p>附录</p></li></ol><h3 id="需求验证（了解）">需求验证（了解）</h3><p>需求验证也称为需求确认,其活动是为了确认以下几个方面的内容:</p><ol><li class="lvl-3"><p>SRS正确描述了预期的、满足项目干系人需求的系统行为与特征。</p></li><li class="lvl-3"><p>SRS中的软件需求是从系统需求、业务规格和其他来源中正确推导而来的。</p></li><li class="lvl-3"><p>需求是完整和高质量的</p></li><li class="lvl-3"><p>需求的表示在所有地方都是一致的</p></li><li class="lvl-3"><p>需求为继续进行系统设计、实现和测试提供了足够的基础。</p></li></ol><p>在实际工作中, -般通过需求评审和需求测试工作来对需求进行验证。需求评审就是对SRS进行技术评审。</p><h3 id="UML（掌握）">UML（掌握）</h3><ol><li class="lvl-3"><p>UML是一种定义良好，易于表达、功能强大且普遍适用的建模语言。从总体来看，UML的结构包括造块、规则和公共机制三个部分。</p></li><li class="lvl-3"><p>UML用关系把事物集合在一起，主要有四个关系</p><ul class="lvl-2"><li class="lvl-5">依赖，一个事物发生改变会影响到另外一个事物的语义</li><li class="lvl-5">关联，关联描述一组对象之间连接的结构关系</li><li class="lvl-5">泛化，泛化是一般化和特殊化的关系，描述特殊元素的对象可替换的一般元素的对象</li><li class="lvl-5">实现，实现时类与类之间的语义定义关系，其中一个类指定了由另外一个类保证执行的契约。</li></ul></li></ol><h4 id="依赖（掌握）">依赖（掌握）</h4><p>表现为函数中的参数(use a) ,是类与类之间的连接,表示一个类依赖于另一个类的定义,其中一个类的变化将影响另外一个类。例如如果A依赖于B ,则B体现为局部变量,方法的参数、或静态方法的调用。如电视(TV)依赖于频道(channel)常见的依赖关系如下:</p><ol><li class="lvl-3"><p>类B以参数的形式传入类A的方法中</p></li><li class="lvl-3"><p>类B以局部变量的形式存在于类A的方法中</p></li><li class="lvl-3"><p>类A调用类B的静态方法。</p></li></ol><p>UML图中实现使用一条带有箭头的虚线指向被依赖的类，如下：</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统15.png" style="zoom:67%;"><h4 id="关联（掌握）">关联（掌握）</h4><p>表现为变量(has a)，类与类之间的联接，它使一个类知道另一个类的属性和方法。例如如果A依赖于B，则B体现为A的全局变量，如person类company类</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统16.png" style="zoom:67%;"><h4 id="泛化（掌握）">泛化（掌握）</h4><p>表示类与类之间的集成关系、接口与接口之间的继承关系。</p><p>UML使用一条带有空心三角箭头的实线指向基类，如下：</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统17.png" style="zoom:67%;"><h4 id="实现（掌握）">实现（掌握）</h4><p>表示类对接口的实现。UML图中实现使用一条带有空心三角箭头的虚线指向接口，如下：</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统18.png" style="zoom: 50%;"><h3 id="UML2-0-14种图（掌握）">UML2.0-14种图（掌握）</h3><ol><li class="lvl-3"><p>类图:类图描述一组类、接口、协作、和它们之间的关系,类图给出系统静态设计视图,活动类的类图给出了系统的静态进程视图。</p></li><li class="lvl-3"><p>对象图:对象图描述一组对象及他们之间的关系。</p></li><li class="lvl-3"><p>构件图:构件图描述一个封装的类和它的接口、 端口、以及由内嵌的构件和连接件构成的内部结构。</p></li><li class="lvl-3"><p>组合结构图:组合结构图描述结构化类(例如,构件或类)的内部结构,包括结构化类与系统其余部分的交互点。</p></li><li class="lvl-3"><p>用例图:用例图描述一组用例、参与者及它们之间的关系</p></li><li class="lvl-3"><p>顺序图(也称序列图) : 顺序图是一种<mark>交互图</mark> ,交互图展示了一种交互，它由一组对象或参与者以及它们之间可能发送的消息构成。交互图关注于系统的动态视图。顺序图是强调消息的时间次序的交互图。</p></li><li class="lvl-3"><p>通信图:通信图也是一种<mark>交互图</mark> ,它强调收发消息的对象或参与者的结构组织。顺序图强调的时序,通信图强调的对象之间的组织机构关系。</p></li><li class="lvl-3"><p>定时图(也称计时图) :定时图也是一种<mark>交互图</mark> ,他强调消息跨越不同对象或参与者的实际时间,而不仅仅只是关心消息的相对顺序。</p></li><li class="lvl-3"><p>状态图:状态图描述一个状态机,它由状态、转移、事件和活动组成,状态图给出了对象的动态视图。</p></li><li class="lvl-4"><p>活动图:活动图讲进程或其他计算机结构展示为计算内部-步步的控制流和数据流。活动图专注于系统的动态视图,它强调对象间的控制流程。</p></li><li class="lvl-4"><p>部署图:部署图描述对运行时的处理节点及在其中生存的构件配置。部署图给出了架构的静态部署视图,通常一个节点包含一个或多个部署图。</p></li><li class="lvl-4"><p>制品图:制品图描述计算机中一-个系统的物理结构,制品包括文件、数据库和类似的物理比特集合。制品图通常与部署图在一起使用。 制品也给出了他们的实现的类和构件。</p></li><li class="lvl-4"><p>包图:包图描述由模型本身分解而成的组织单元,以及它们之间的依赖关系。</p></li><li class="lvl-4"><p>交互概览图:交互概览图是互动图和顺序图的混合物。</p></li></ol><h3 id="UML视图（掌握）">UML视图（掌握）</h3><ul class="lvl-0"><li class="lvl-2"><p>逻辑视图：逻辑视图也称为<mark>设计视图</mark>，它表示设计模型中在架构方面具有重要意义的部分，即类、子系统、包和用例实现的子集。</p></li><li class="lvl-2"><p>进程视图：进程视图是可执行线程与进程作为活动类的建模，它是逻辑视图的一次执行实例,描述了并发与同步结构。</p></li><li class="lvl-2"><p>实现视图：实现视图对组成基于系统的物理代码的文件和构件进行建模。</p></li><li class="lvl-2"><p>部署视图：:部署视图把构件部署到一组物理节点上,表示软件到硬件的映射和分布结构。</p></li><li class="lvl-2"><p>用例视图：用例视图是最基本上的需求分析模型。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统19.png" style="zoom:67%;"><h3 id="OOA与OOD（了解）">OOA与OOD（了解）</h3><p>OOA：Object-Oriented Analysis（面向对象分析方法）</p><p>OOD：Object-Oriented Design（面向对象设计）</p><p>OOA模型独立于具体实现，即不考虑具体实现有关的因素，这也是OOA与OOD的区别所在，OOA的任务是”做什么“，OOD的任务是”怎么做“。<mark>面对对象分析阶段</mark>的核心工作是<mark>建立系统用例模型与分析模型</mark>。</p><h3 id="软件架构风格（掌握）‼️">软件架构风格（掌握）‼️</h3><p>解决好软件的复用、质量和维护问题，是研究软件架构的根本目的。软件架构设计的一个核心问题是能否达到架构级的软件复用，在这一活动中，评估人员关注的是系统质量属性。</p><ol><li class="lvl-3"><p>数据流风格：包括<mark>批处理序列</mark>（顺序执行）和<mark>管道/过滤器</mark>（输入输出数据流）两种风格。</p></li><li class="lvl-3"><p>调用/返回风格：包括<mark>主程序/子程序</mark>（过程调用）、<mark>数据抽象和面向对象</mark>（对象及封装）以及<mark>层次结构</mark>（分层调用）</p></li><li class="lvl-3"><p>独立构件风格：包括<mark>进程通信</mark>（消息传递、远程调用）和<mark>事件驱动</mark>（时间触发调用）的系统</p></li><li class="lvl-3"><p>虚拟机风格：包括<mark>解释器</mark>（解释引擎）和<mark>基于规则</mark>（规则集）的系统</p></li><li class="lvl-3"><p>仓库风格：包括<mark>数据库系统</mark>（中央共享数据源）、<mark>黑板系统</mark>（知识源、黑板以及共享数据和控制）和<mark>超文本系统</mark>（非线性交叉引用）</p></li></ol><h3 id="软件架构评估（了解）">软件架构评估（了解）</h3><p>所关注的是质量属性</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统20.png" style="zoom:67%;"><h3 id="软件设计（掌握）">软件设计（掌握）</h3><ol><li class="lvl-3"><p>软件设计分为<u>结构化设计</u>与面对对象设计。</p></li><li class="lvl-3"><p>结构化设计SD是一种面向数据流的方法,它以SRS和SA阶段所产生的DFD和数据字段等文档为基础,是一个自顶向下、逐步求精和模块化的过程。SD分为概要设计和详细设计两个阶段。</p></li><li class="lvl-3"><p>在SD中,需要遵循一个基本原则:<u>高内聚,低耦合</u>,模块内部高度内聚,模块与模块之间需要降低耦合度。</p></li></ol><h3 id="软件工程的过程管理（掌握）">软件工程的过程管理（掌握）</h3><p>CMMI V1.2版本</p><p>阶段式：CMM 连续式：EIAIS。逻辑等价，但是分类方法不同，结果应该是相通的</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统21.png" style="zoom:67%;"><hr><p>口诀：</p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F22.png" alt=""></p><blockquote><p>这两种各有优缺点，均采用统一的24个过程域，在逻辑上是等价的，<u>对统一组织采用阶段时模型和连续式模型分别进行CMMI评估得到的结论应该是相同的</u></p></blockquote><h3 id="测试（掌握）">测试（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统23.png" style="zoom:67%;"><h4 id="白盒测试（掌握）">白盒测试（掌握）</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统24.png" style="zoom:67%;"><h4 id="软件测试（掌握）">软件测试（掌握）</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统25.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统26.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统27.png" style="zoom:67%;"><h3 id="企业应用集成EAI（掌握）‼️">企业应用集成EAI（掌握）‼️</h3><p>EAI（Enterprise Application Integration）可以包括<mark>表示集成、数据集成、控制集成和业务流程集成</mark>等多个层次和方面。也可以在<mark>多个企业之间进行应用集成</mark></p><h4 id="表示集成（界面集成）：">表示集成（界面集成）：</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统28.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统29.png" style="zoom:67%;"><h4 id="数据集成（是白盒集成）：">数据集成（是白盒集成）：</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统30.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统31.png" style="zoom:67%;"><h4 id="控制集成（功能集成-应用集成）：">控制集成（功能集成/应用集成）：</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统32.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统33.png" style="zoom:67%;"><h4 id="业务流程集成（过程集成）：">业务流程集成（过程集成）：</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统34.png" style="zoom:67%;"><h4 id="企业之间的应用集成：">企业之间的应用集成：</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统35.png" style="zoom:67%;"><h2 id="新一代信息技术">新一代信息技术</h2><p>物联网、云计算、大数据、移动互联网、互联网+、AI人工智能、区块链</p><h3 id="物联网（掌握）">物联网（掌握）</h3><p>The Internet of Things</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统36.png" style="zoom:67%;"><p>架构：</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统37.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统38.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统39.png" style="zoom:77%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统40.png"><h3 id="云计算（掌握）">云计算（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F41.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F42.png" alt=""></p><h3 id="大数据（掌握）">大数据（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F43.png" alt=""></p><h3 id="移动互联网（掌握）">移动互联网（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F44.png" alt=""></p><h3 id="互联网-（掌握）">互联网+（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F45.png" alt=""></p><h3 id="AI（人工智能）（掌握）">AI（人工智能）（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F46.png" alt=""></p><h3 id="区块链（掌握）">区块链（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F47.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F48.png" alt=""></p><h3 id="智能制造2025（掌握）">智能制造2025（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F49.png" alt=""></p><h2 id="信息系统安全技术">信息系统安全技术</h2><h3 id="信息安全的有关概念（掌握）">信息安全的有关概念（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F50.png" alt=""></p><h4 id="稳定性、可用性和可靠性（了解）">稳定性、可用性和可靠性（了解）</h4><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统51.png" style="zoom:67%;"><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F52.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F53.png" alt=""></p><h3 id="信息加密、解密与常用算法（掌握）">信息加密、解密与常用算法（掌握）</h3><h4 id="加密技术（掌握）">加密技术（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F54.png" alt=""></p><h4 id="数字签名（掌握）">数字签名（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F55.png" alt=""></p><h4 id="认证（掌握）">认证（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F56.png" alt=""></p><h4 id="计算机设备安全（了解）">计算机设备安全（了解）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F57.png" alt=""></p><h4 id="防火墙（掌握）">防火墙（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F58.png" alt=""></p><h4 id="入侵检测与防护（掌握）">入侵检测与防护（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F59.png" alt=""></p><h4 id="VPN虚拟专用网络（掌握）">VPN虚拟专用网络（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F60.png" alt=""></p><h4 id="安全扫描、蜜罐技术（了解）">安全扫描、蜜罐技术（了解）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F61.png" alt=""></p><h3 id="信息系统安全（掌握）">信息系统安全（掌握）</h3><h4 id="操作系统安全（掌握）">操作系统安全（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F62.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F63.png" alt=""></p><h4 id="数据库安全（掌握）">数据库安全（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F64.png" alt=""></p><h4 id="应用系统安全（掌握）">应用系统安全（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F65.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F66.png" alt=""></p><h2 id="信息化和信息系统">信息化和信息系统</h2><h3 id="“十三五”规划纲要（了解）">“十三五”规划纲要（了解）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统67.png" style="zoom:67%;"><h3 id="信息化发展的9个特点（了解）">信息化发展的9个特点（了解）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统68.png" style="zoom:67%;"><h3 id="电子政务（掌握）">电子政务（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统69.png" style="zoom:67%;"><h3 id="电子商务（了解-掌握）">电子商务（了解/掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统70.png" style="zoom:67%;"><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统71.png" style="zoom:67%;"><p>对象需掌握</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统72.png" style="zoom:67%;"><h3 id="工业和信息化融合（掌握）">工业和信息化融合（掌握）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统73.png" style="zoom:67%;"><h3 id="信息系统服务管理（了解）">信息系统服务管理（了解）</h3><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统74.png"><h3 id="工程监理（掌握）">工程监理（掌握）</h3><p>定义：依法设立且具备相应资质的监理单位,受业主单位(建设单位)委托,依据国家有关法律法规、技术标准和信息系统I程监理合同，对信息系统工程项目实施的监督管理</p><p>工作内容：‼️</p><ul class="lvl-0"><li class="lvl-2"><p>四控：</p><ul class="lvl-2"><li class="lvl-4">投资控制</li><li class="lvl-4">进度控制</li><li class="lvl-4">质量控制</li><li class="lvl-4">变更控制</li></ul></li><li class="lvl-2"><p>三管：</p><ul class="lvl-2"><li class="lvl-4">合同管理</li><li class="lvl-4">信息管理</li><li class="lvl-4">安全管理</li></ul></li><li class="lvl-2"><p>一协调：</p><ul class="lvl-2"><li class="lvl-4">沟通协调</li></ul></li></ul><p>需要实施监理的项目：<img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F75.png" alt=""></p><h3 id="系统运行维护（掌握）">系统运行维护（掌握）</h3><p>运行维护是信息系统生命周期中最重要的，也是最长的一个阶段</p><h4 id="IT服务管理（ITSM-：">IT服务管理（ITSM)：</h4><p><mark>需要知道，是个方法论，以服务为中心</mark></p><p>定义：是一套帮助组织对IT系统的规划、研发、实施和运营进行有效管理的方法，是一套方法论</p><p>核心思想</p><ul class="lvl-0"><li class="lvl-2"><p>提供低成本、高质量的IT服务</p></li><li class="lvl-2"><p>IT服务的质量和成本则需从IT服务的客户（购买IT服务）方和用户（使用IT服务）方加以判断</p></li><li class="lvl-2"><p>以服务为中心的IT管理</p></li></ul><p>TSSS体系框架内容</p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/第一章信息化和信息系统76.png"><h4 id="信息系统规划（掌握）">信息系统规划（掌握）</h4><p>定义：</p><p>信息系统规划（也称为信息系统战略规划）是一个组织有关信息系统建设与应用的全局性谋划，主要包括战略目标、策略和部署内容。</p><p><mark>信息系统规划</mark>是企业信息化建设的<mark>首要纲领</mark>，是信息系统建设的<mark>前提和依据</mark></p><p>大型信息系统的特点：‼️</p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F77.png" alt=""></p><h2 id="信息系统规划">信息系统规划</h2><h3 id="规划原则（了解）：">规划原则（了解）：</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F78.png" alt=""></p><h3 id="规划流程（掌握）：‼️">规划流程（掌握）：‼️</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F79.png" alt=""></p><h3 id="信息系统规划（ISP）（掌握）（不怎么考）">信息系统规划（ISP）（掌握）（不怎么考）</h3><p>第一阶段：</p><ul class="lvl-0"><li class="lvl-2"><p>主要以数据处理为核心,围绕职能部门需求的信息系统规划。</p></li><li class="lvl-2"><p>主要的方法包括企业系统规划法、关键成功因素法和战略集合转化法。</p></li></ul><p>第二阶段：</p><ul class="lvl-0"><li class="lvl-2"><p>主要以企业内部管理信息系统为核心,围绕企业整体需求进行的信息系统规划</p></li><li class="lvl-2"><p>主要的方法包括战略数据规划法、信息工程法和战略栅格法</p></li></ul><p>第三阶段：</p><ul class="lvl-0"><li class="lvl-2"><p>在综合考虑企业内外环境的情况下,以集成为核心，围绕企业战略需求进行的信息系统规划</p></li><li class="lvl-2"><p>主要的方法包括价值链分析法和战略一致性模型</p></li></ul><h3 id="企业系统规划（BSP）（掌握）‼️">企业系统规划（BSP）（掌握）‼️</h3><p>BSP主要方法用于<mark>大型系统</mark>的开发</p><p>步骤‼️：</p><ol><li class="lvl-3"><p>项目确定</p></li><li class="lvl-3"><p>准备工作</p></li><li class="lvl-3"><p>定义企业过程</p></li><li class="lvl-3"><p>识别定义数据类</p></li><li class="lvl-3"><p>分析现有系统</p></li><li class="lvl-3"><p>确定管理部门对系统的要求</p></li><li class="lvl-3"><p>指定建议书和开发计划</p></li><li class="lvl-3"><p>成果报告</p></li></ol><h3 id="信息系统的规划工具（掌握）">信息系统的规划工具（掌握）</h3><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F80.png" alt=""></p><h4 id="PERT工程网络图（掌握）">PERT工程网络图（掌握）</h4><p>PERT图特点:不仅给出了每个任务的<u>开始时间</u>、<u>结束时间</u>和<u>完成该任务所需的时间,</u>还给出了任务之间<u>的关系</u>。</p><p>在PERT图中,关键路径是图中最长的一条路径。 而松弛时间则反映了完成某些任务时可以推迟其开始时间或延长其所需完成的事件。但是PERT图不能反 应任务之间的并行关系。</p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F81.png" alt=""></p><h4 id="甘特图（掌握）">甘特图（掌握）</h4><p>特点：能清晰的描述每个任务从何时开始，到何时结束，以及任务之间的并行关系。但是他不能清晰的反映出各任务的依赖关系</p><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F82.png" alt=""></p><h4 id="过程-组织（P-O）矩阵（掌握）">过程/组织（P/O）矩阵（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F83.png" alt=""></p><p>√：决策人员。*：主要参与人员。+：参与了</p><h4 id="资源-数据（R-D）矩阵（掌握）">资源/数据（R/D）矩阵（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F84.png" alt=""></p><h4 id="C-U矩阵（掌握）">C/U矩阵（掌握）</h4><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F85.png" alt=""></p><p>U:  User 顾客</p><p>C:  Creat 创建数据类</p><h2 id="企业首席信息官及其职责（了解）">企业首席信息官及其职责（了解）</h2><p><img src="https://cdn.jsdelivr.net/gh/DreamUnity/typoraImage/%E7%AC%AC%E4%B8%80%E7%AB%A0%E4%BF%A1%E6%81%AF%E5%8C%96%E5%92%8C%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F86.png" alt=""></p><h2 id="商业智能（BI）（掌握）">商业智能（BI）（掌握）</h2><p>定义：将组织中现有的数据转化为知识，帮助组织作出明智的业务经营决策</p><p>主要功能：</p><ul class="lvl-0"><li class="lvl-2"><p>数据仓库</p></li><li class="lvl-2"><p>数据ETL（数据抽取、转换和加载）</p></li><li class="lvl-2"><p>数据统计输出（报表）</p></li><li class="lvl-2"><p>分析功能</p></li></ul><p>组成部分：</p><ul class="lvl-0"><li class="lvl-2"><p>数据仓库</p></li><li class="lvl-2"><p>联机分析处理（OLAP）</p></li><li class="lvl-2"><p>数据挖掘</p></li><li class="lvl-2"><p>数据分析</p></li><li class="lvl-2"><p>数据备份和恢复</p></li></ul><p>基本体系结构：</p><ul class="lvl-0"><li class="lvl-2"><p>数据仓库</p></li><li class="lvl-2"><p>联机分析处理（OLAP）</p></li><li class="lvl-2"><p>数据挖掘</p></li></ul><p>⚠️：OLTP是属于数据库的，联机业务处理</p>]]></content>
      
      
      <categories>
          
          <category> 高级软考 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高级软考 </tag>
            
            <tag> 信息系统项目管理师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_表空间</title>
      <link href="/2022/08/12/mysql-biao-kong-jian/"/>
      <url>/2022/08/12/mysql-biao-kong-jian/</url>
      
        <content type="html"><![CDATA[<h1>表在文件系统中的表示</h1><p>InnoDB存储表数据的方式：</p><ul class="lvl-0"><li class="lvl-2">每个索引对应一个b+树，每个节点都是一个数据页，用双链表连接</li><li class="lvl-2">叶子节点存储了完整的用户记录</li></ul><p>管理这些页：表空间（系统表空间、独立表空间[为每个表建立一个]、其他类型表空间[通用表\undo\临时表]）</p><p>MyISAM存储表数据的方式：没有表空间一说，表的数据和索引数据都存放在数据库子目录下</p><h1>InnoDB的表空间</h1><h2 id="独立表空间结构">独立表空间结构</h2><h3 id="区的概念">区的概念</h3><p><mark>64页-1区   256区-1组</mark></p><ul class="lvl-0"><li class="lvl-2"><p>第一个组的最开始的3个页面类型是固定的</p></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">FSP_HDR记录表空间整体属性以及所有区的属性，整个表空间只有过一个FSP_HDR类型页面</li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">IBUF_BITMAP存储有关Change Buffer的一些信息</li></ul></li><li class="lvl-3"><ul class="lvl-2"><li class="lvl-5">INODE存储INODE Entry的数据结构</li></ul></li><li class="lvl-2"><p>其余的各组的两个页面的类型是固定的</p></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">XDES（extent descriptor）用来登记本组256个区的属性，与FSP_HDR作用类似但是FSP_HDR会额外存储一些表空间的属性</li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">IBUF_BITMAP存储有关Change Buffer的一些信息</li></ul></li></ul><h3 id="段的概念">段的概念</h3><p><code>索引-&gt;叶子段、非叶子段</code><br>碎片区：碎片区的页可以用于不同目的，其中可以有的页属段A，有的页属段B，有的直接属表空间。</p><ul class="lvl-0"><li class="lvl-2"><p>刚插入数据时，段从某个碎片区以单个页来分配空间</p></li><li class="lvl-2"><p>段占用32个碎片区页面之后，以完整的区为单位分配存储空间<mark>段是某些零散的页面以及一些完整的区的集合</mark></p></li></ul><h3 id="区的分类-XDES-Entry">区的分类 XDES Entry</h3><ul class="lvl-0"><li class="lvl-2"><p>FREE 区的分类</p></li><li class="lvl-2"><p>FREE_FRAG 有剩余空闲页面的碎片区</p></li><li class="lvl-2"><p>FULL_FRAG 没有剩余空闲页面的碎片区</p></li><li class="lvl-2"><p>FSEG 附属于某个段的区</p></li></ul><p>FREE 、FREE_FRAG 、FULL_FRAG属于表空间</p><p>XDES Entry 管理以上的<mark>区</mark><br><img src="https://img-blog.csdnimg.cn/78c208b593ae4416815744bc9757ae62.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>Segment ID 该区所在的段的ID</p></li><li class="lvl-2"><p>List Node 将若干个XDES Entry连成一个链表</p></li><li class="lvl-2"><p>State 区的状态，即以上四个</p></li><li class="lvl-2"><p>Page State Bitmap 16字节-128位。一个区有64的页，这128位分为64个部分，每部分的第一位表示对应的表是否空闲，第二位还没用到</p></li></ul><p>通过XDES Entry结构中的List Node建成链表，将状态对应的区对应的XDES Entry结构连接成一个链表，<mark>直属于表空间</mark></p><ul class="lvl-0"><li class="lvl-2"><p>FREE链表</p></li><li class="lvl-2"><p>FREE_FRAG链表</p></li><li class="lvl-2"><p>FULL_FRAG链表</p></li></ul><p>根据段号建立链表，为每个段中的区的XDES Entry结构建立了3个链表，<mark>属于段</mark></p><ul class="lvl-0"><li class="lvl-2"><p>FREE链表</p></li><li class="lvl-2"><p>NOT_FULL链表</p></li><li class="lvl-2"><p>FULL链表</p></li></ul><p>List Base Node（链表及节点）结构，包含了链表的头节点和尾节点等<br><img src="https://img-blog.csdnimg.cn/02a0a03ea0c54fdaa9750cc2c94266b7.png" alt=""></p><h3 id="段的结构-INODE-Entry">段的结构 INODE Entry</h3><p><mark>段是一个逻辑上的概念</mark></p><ul class="lvl-0"><li class="lvl-2"><p>NOT_FULL_N_USED 在NOT_FULL链表中使用了多少个页面</p></li><li class="lvl-2"><p>MagicNumber 标记INODE Entry是否被初始化</p></li><li class="lvl-2"><p>Fragment Array Entry 每个对应着一个零散的页面，表页号</p></li></ul><p><img src="https://img-blog.csdnimg.cn/e5e8fbfe83d543508a17c181cd18b0c0.png" alt=""></p><h3 id="各类型页面">各类型页面</h3><ul class="lvl-0"><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">FSP_HDR类型：第一个组的第一个页面，即表空间的第一个页面，存储表空间的整体属性及其第一个组的256个XDES Entry结构<br><img src="https://img-blog.csdnimg.cn/df76a34bdfca434daaa788eea6959cc7.png" alt=""></li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">XDES类型：只是不记录表空间的整体属性 <img src="https://img-blog.csdnimg.cn/fce8506ad3874b0da0ca214f154d57a6.png" alt=""></li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">IBUF_BITMAP了类型：记录了有关Change Buffer的东西</li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">INODE类型：为了存储INODE Entry结构，其中，List Node For INODE Page List通用链表节点，存储上一个和下一个INODE页面的指针，当段超过85个时，需要额外的INODE类型的页面存储。讲这些INODE类型的页面串成两个不同链表</li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4"><ul class="lvl-4"><li class="lvl-6">SEG_INODES_FULL</li></ul></li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4"><ul class="lvl-4"><li class="lvl-6">SEG_INODES_FREE<br><img src="https://img-blog.csdnimg.cn/910931f96e304d858e7d2b871427c4d9.png" alt=""></li></ul></li></ul></li></ul><h3 id="Segment-Header-结构的运用">Segment Header 结构的运用</h3><p><mark>如何知道哪个段对应哪个INODE Entry结构</mark></p><ul class="lvl-0"><li class="lvl-2"><p>Space ID 表空间ID</p></li><li class="lvl-2"><p>Page Number 所在的页面页号</p></li><li class="lvl-2"><p>Byte Offset 偏移量<br><img src="https://img-blog.csdnimg.cn/c5874ad637604f7e853e2faad760c5fc.png" alt=""></p></li></ul><h2 id="系统表空间">系统表空间</h2><p><mark>开头有许多记录整个系统属性的页面</mark>前1-3页面的类型是与独立表空间  一致的，但后3-7是系统表特有的</p><ul class="lvl-0"><li class="lvl-2"><p>SYS：存储Change Buffer的头部信息</p></li><li class="lvl-2"><p>INDEX：存储Change Buffer的根页面</p></li><li class="lvl-2"><p>TRX_SYS： 事务系统的相关信息</p></li><li class="lvl-2"><p>SYS：第一个回滚段的信息</p></li><li class="lvl-2"><p>SYS：数据字典头部信息</p></li></ul><p>其中extent 1和extent 2成为双写缓冲区。</p><p><img src="https://img-blog.csdnimg.cn/64075a08ef5843599fb86c24347498ba.png" alt=""></p><h3 id="InnoDB数据字典">InnoDB数据字典</h3><p>每当向一个表插入一条数据时，需要进行一系列的校验。使用的信息不是使用INSERT语句插入的用户数据，需要引入一些额外数据—<mark>元数据</mark>其中有4个表尤其重要，如下‼️</p><ul class="lvl-0"><li class="lvl-2"><p>SYS_TABLES 所有表信息</p></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">以NAME列为主键的聚簇索引</li></ul></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">以ID为列建立的二级索引</li></ul></li><li class="lvl-2"><p>SYS_COLUMNS 所有列信息</p></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">只有一个以(TABLE_ID, POS)建立的聚簇索引</li></ul></li><li class="lvl-2"><p>SYS_INDEXES 所有索引信息</p></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">只有一个以(TABLE_ID, ID)列为主键的聚簇索引</li></ul></li><li class="lvl-2"><p>SYS_FIELDS 所有索引对应的列的信息</p></li><li class="lvl-2"><ul class="lvl-2"><li class="lvl-4">只有一个以（INDEX_ID, POS)列为主键的聚簇索引</li></ul></li></ul><p>Data Dictionary Header页面：有了上述的4张表，可以获取其他系统表以及用户定义的表的所有元数据。</p><ol><li class="lvl-3"><p>根据表名到SYS_TABLES表中定位到<code>表的TABLE_ID</code></p></li><li class="lvl-3"><p>使用TABLE_ID到SYS_CCOLUMNS表中获取<code>所有列</code>的信息</p></li><li class="lvl-3"><p>使用TABLE_ID到SYS_INDEXES表中获取<code>所有索引</code>的信息</p></li><li class="lvl-3"><p>使用TABLE_ID到SYS_FIELDS表中获取所有索引列的信息</p></li></ol><p><mark>使用类型为SYS的页面记录上述4张表</mark></p>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记_第二周</title>
      <link href="/2022/08/12/leetcode-shua-ti-bi-ji-di-er-zhou/"/>
      <url>/2022/08/12/leetcode-shua-ti-bi-ji-di-er-zhou/</url>
      
        <content type="html"><![CDATA[<h1>二叉树搜索一条边/整个树的写法</h1><p>搜索一条边的写法:</p><pre class="line-numbers language-language-java"><code class="language-language-java">if (递归函数(root->left)) return ;if (递归函数(root->right)) return ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>搜索整个树的写法</p><pre class="line-numbers language-language-java"><code class="language-language-java">left = 递归函数(root->left);right = 递归函数(root->right);left与right的逻辑处理;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>二叉树</h1><h2 id="100-相同的树">100. 相同的树</h2><p>给你两棵二叉树的根节点 p 和 q ，编写一个函数来检验这两棵树是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><blockquote><p>输入：p = [1,2,3], q = [1,2,3]<br>输出：true</p></blockquote><p>迭代法</p><pre class="line-numbers language-language-java"><code class="language-language-java">public boolean isSameTree(TreeNode p, TreeNode q) {return compare(p, q);}public boolean compare(TreeNode left, TreeNode right){    if(left == null && right == null) return true;    else if(left != null && right == null) return false;    else if(left == null && right != null) return false;    else if(left.val != right.val) return false;    boolean leftIsSame = compare(left.left, right.left);    boolean rightIsSame = compare(left.right, right.right);    return leftIsSame && rightIsSame;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="404-左叶子之和">404. 左叶子之和</h2><p>给定二叉树的根节点 root ，返回所有左叶子之和。</p><p>递归法：</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int sumOfLeftLeaves(TreeNode root){    if (root == null) return 0;    int midValue = 0;    if (root.left != null && root.left.left == null && root.left.right == null){        midValue = root.left.val;    }    return midValue + sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代：</p><pre class="line-numbers language-language-java"><code class="language-language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="513-找树左下角的值">513. 找树左下角的值</h2><p>给定一个二叉树的 根节点 root，请找出该二叉树的 最底层 最左边 节点的值。</p><p>假设二叉树中至少有一个节点。</p><blockquote><p>输入: root = [2,1,3]<br>输出: 1</p></blockquote><pre class="line-numbers language-language-java"><code class="language-language-java">public int findBottomLeftValue(TreeNode root) {    Queue<TreeNode> queue = new LinkedList<>();    queue.offer(root);    int res = 0;    while (!queue.isEmpty()) {        int size = queue.size();        for (int i = 0; i < size; i++) {            TreeNode poll = queue.poll();            if (i == 0) {                res = poll.val;            }            if (poll.left != null) {                queue.offer(poll.left);            }            if (poll.right != null) {                queue.offer(poll.right);            }        }    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="112-路径总和（简单）-返回值判断">112. 路径总和（简单） 返回值判断</h2><p>给你二叉树的根节点 root 和一个表示目标和的整数 targetSum 。判断该树中是否存在 根节点到叶子节点 的路径，这条路径上所有节点值相加等于目标和 targetSum 。如果存在，返回 true ；否则，返回 false 。</p><blockquote><p>输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22<br>输出：true<br>解释：等于目标和的根节点到叶节点路径如上图所示。</p></blockquote><ul class="lvl-0"><li class="lvl-3"><p>如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值。（这种情况就是本文下半部分介绍的113.路径总和ii）</p></li><li class="lvl-3"><p>如果需要搜索整棵二叉树且需要处理递归返回值，递归函数就需要返回值。 （这种情况我们在236. 二叉树的最近公共祖先 (opens new window)中介绍）</p></li><li class="lvl-3"><p>如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。（本题的情况）</p></li></ul><pre class="line-numbers language-language-java"><code class="language-language-java">public boolean hasPathSum(TreeNode root, int targetSum) {    if(root == null) return false;    return traversal(root, targetSum - root.val);}public boolean traversal(TreeNode node, int count){    if(node.left == null && node.right == null && count == 0) return true;    if(node.left == null && node.right == null) return false;    if(node.left != null){        count -= node.left.val;        if(traversal(node.left, count)) return true;        count += node.left.val;    }    if(node.right != null){        count -= node.right.val;        if(traversal(node.right, count)) return true;        count += node.right.val;    }    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="113-路径总和-II（中等）">113. 路径总和 II（中等）</h2><p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径</p><pre class="line-numbers language-language-java"><code class="language-language-java">List<List<Integer>> resList = new ArrayList<>();public List<List<Integer>> pathSum(TreeNode root, int targetSum) {    if(root == null) return resList;    List<Integer> list = new ArrayList<>();    traversal(root, list, targetSum - root.val);    return resList;}public void traversal(TreeNode node ,List<Integer> list, int count){    list.add(node.val);    if(node.left == null && node.right == null && count == 0){        resList.add(new ArrayList<>(list));        return;    }    if(node.left == null && node.right == null){        return;    }    if(node.left != null){        count -= node.left.val;        traversal(node.left, list, count);        list.remove(list.size() - 1);        count += node.left.val;    }    if(node.right != null){        count -= node.right.val;        traversal(node.right, list, count);        list.remove(list.size() - 1);        count += node.right.val;    }    return;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="106-从中序与后序遍历序列构造二叉树-中等">106.从中序与后序遍历序列构造二叉树(中等)</h2><p>给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗 二叉树 。</p><blockquote><p>输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]<br>输出：[3,9,20,null,null,15,7]</p></blockquote><p>迭代思路：</p><ol><li class="lvl-3"><p>若数组为0则为空节点</p></li><li class="lvl-3"><p>不为空，则取后序最后一个节点作为根节点</p></li><li class="lvl-3"><p>找到根节点在中序数组中的位置，作为切割点</p></li><li class="lvl-3"><p>切割中序数组，切成中序左数组和中序后数组</p></li><li class="lvl-3"><p>切割后序数组，切成后序左数组和后序右数组</p></li><li class="lvl-3"><p>递归处理左区间和右区间</p></li></ol><p>重点：坚持循环不变量首先切割中序数组（因为后序最后一个元素就是切割点，好找，坚持左闭右开）左闭右开区间[0, delimiterIndex), [delimiterIndex,end)</p><p>然后切割后序数组，按照中序数组的大小来切割，切割成左数组和右数组<br>[0, leftInorder.size),[leftInorder.size, end)</p><p>递归：<br>root.left = traversal(leftInoreder, leftPostorder);<br>root.right = traversal(rightInorder, rightPostorder);</p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode buildTree(int[] inorder, int[] postorder) {    return buildTree1(inorder, 0, inorder.length, postorder, 0, postorder.length);}private TreeNode buildTree1(int[] inorder, int inLeft, int inRight,                            int[] postorder, int postLeft, int postRight){    //没有元素了    if (inRight - inLeft < 1) return null;    if (inRight - inLeft == 1) return new TreeNode(inorder[inLeft]);    int rootVal = postorder[postRight - 1];    TreeNode root = new TreeNode(rootVal);    int rootIndex = 0;    for (int i = inLeft; i < inRight; i++) {        if (inorder[i] == rootVal){            rootIndex = i;            break;        }    }        System.out.println();    root.left = buildTree1(inorder, inLeft, rootIndex,            postorder, postLeft, postLeft + (rootIndex - inLeft));    root.right = buildTree1(inorder, rootIndex + 1, inRight,            postorder, postLeft + (rootIndex - inLeft), postRight - 1);    return root;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="105-从前序与中序遍历序列构造二叉树（中等）">105. 从前序与中序遍历序列构造二叉树（中等）</h2><p>给定两个整数数组 preorder 和 inorder ，其中 preorder 是二叉树的先序遍历， inorder 是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p><blockquote><p>输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]<br>输出: [3,9,20,null,null,15,7]</p></blockquote><p>思路：与后序+中序的思路一样，范围同样是左包右闭</p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode buildTree(int[] preorder, int[] inorder) {    return buildTree2(preorder, 0, preorder.length, inorder, 0, inorder.length);}public TreeNode buildTree2(int[] preorder, int preLeft, int preRight,int[] inorder, int inLeft, int inRight){    if(inRight - inLeft < 1) return null;    if(inRight - inLeft == 1) return new TreeNode(inorder[inLeft]);    int rootVal = preorder[preLeft];    TreeNode root = new TreeNode(rootVal);    int rootIndex = 0;    for(int i = inLeft; i < inRight; i++){        if(inorder[i] == rootVal){            rootIndex = i;            break;        }     }    root.left = buildTree2(preorder, preLeft + 1, preLeft + rootIndex - inLeft + 1, inorder, inLeft, rootIndex);    root.right = buildTree2(preorder, preLeft + rootIndex - inLeft + 1, preRight, inorder, rootIndex + 1, inRight);    return root;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="654-最大二叉树-简单">654. 最大二叉树(简单)</h2><p>给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：</p><ul class="lvl-0"><li class="lvl-3"><p>二叉树的根是数组中的最大元素。</p></li><li class="lvl-3"><p>左子树是通过数组中最大值左边部分构造出的最大二叉树</p></li><li class="lvl-3"><p>右子树是通过数组中最大值右边部分构造出的最大二叉树。</p></li></ul><p>通过给定的数组构建最大二叉树，并且输出这个树的根节点。</p><p><img src="https://img-blog.csdnimg.cn/99cb93871ac64f9a95ac40c414a3ecdd.png" alt="请添加图片描述"></p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode constructMaximumBinaryTree(int[] nums) {return travel(nums, 0, nums.length);}public TreeNode travel(int[] elems, int left, int right){    if(right - left < 1) return null;    if(right - left == 1) return new TreeNode(elems[left]);    int rootVal = Integer.MIN_VALUE;    int rootIndex = 0;    for(int i = left; i < right; i++){        if(elems[i] > rootVal){            rootVal = elems[i];            rootIndex = i;        }    }    TreeNode root = new TreeNode(rootVal);    root.left = travel(elems, left, rootIndex);    root.right = travel(elems, rootIndex + 1, right);    return root;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="617-合并二叉树">617. 合并二叉树</h2><p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p><p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><p><img src="https://img-blog.csdnimg.cn/e695282650d642a8b959830144b47d9b.png" alt="请添加图片描述"><br>思路:<br>使用前序</p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {    if(root1 == null) return root2;    if(root2 == null) return root1;    root1.val += root2.val;    root1.left = mergeTrees(root1.left, root2.left);    root1.right = mergeTrees(root1.right, root2.right);    return root1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="700-二叉搜索树中的搜索">700. 二叉搜索树中的搜索</h2><p>给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。<br><img src="https://img-blog.csdnimg.cn/3040c259706f448cb7058740f29ac41a.png" alt="请添加图片描述"></p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode searchBST(TreeNode root, int val) {    Deque<TreeNode> deque = new LinkedList<>();    deque.offerLast(root);    while(!deque.isEmpty()){        int len = deque.size();        while(len > 0){            TreeNode tmp = deque.pollFirst();            if(tmp.val == val) return tmp;            if(tmp.left != null) deque.offerLast(tmp.left);            if(tmp.right != null) deque.offerLast(tmp.right);            len--;        }    }    return null;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="98-验证二叉搜索树-中等">98. 验证二叉搜索树(中等)</h2><p>给定一个二叉树，判断其是否是一个有效的二叉搜索树。</p><p>假设一个二叉搜索树具有如下特征：</p><ul class="lvl-0"><li class="lvl-3"><p>节点的左子树只包含小于当前节点的数。</p></li><li class="lvl-3"><p>节点的右子树只包含大于当前节点的数。</p></li><li class="lvl-3"><p>所有左子树和右子树自身必须也是二叉搜索树。</p></li></ul><p>思路:<br>要知道中序遍历下，输出的二叉搜索树节点的数值是有序序列。有了这个特性，验证二叉搜索树，就相当于变成了判断一个序列是不是递增的了。</p><pre class="line-numbers language-language-java"><code class="language-language-java">TreeNode max;public boolean isValidBST(TreeNode root) {     if(root == null) return true;     //左     boolean left = isValidBST(root.left);     if(!left) return false;     //中     if(max != null && root.val <= max.val){         return false;     }     max = root;     //右     boolean right = isValidBST(root.right);     return right; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="530-二叉搜索树的最小绝对差-简单">530. 二叉搜索树的最小绝对差(简单)</h2><p>给你一个二叉搜索树的根节点 root ，返回 树中任意两不同节点值之间的最小差值 。</p><p>差值是一个正数，其数值等于两值之差的绝对值。</p><p>递归:</p><pre class="line-numbers language-language-java"><code class="language-language-java">TreeNode pre;int res = Integer.MAX_VALUE;public int getMinimumDifference(TreeNode root) {    if(root == null) return 0;    inOrder(root);    return res;}public void inOrder(TreeNode root){    if(root == null) return;    inOrder(root.left);    if(pre != null) res = Math.min(res, root.val - pre.val);    pre = root;    inOrder(root.right);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代:</p><pre class="line-numbers language-language-java"><code class="language-language-java">TreeNode pre;Stack<TreeNode> stack;public int getMinimumDifference(TreeNode root) {   if (root == null) return 0;   stack = new Stack<>();   TreeNode cur = root;   int result = Integer.MAX_VALUE;   while (cur != null || !stack.isEmpty()) {       if (cur != null) {           stack.push(cur); // 将访问的节点放进栈           cur = cur.left; // 左       }else {           cur = stack.pop();            if (pre != null) { // 中               result = Math.min(result, cur.val - pre.val);           }           pre = cur;           cur = cur.right; // 右       }   }   return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="501-二叉搜索树中的众数">501. 二叉搜索树中的众数</h2><p>给你一个含重复值的二叉搜索树（BST）的根节点 root ，找出并返回 BST 中的所有 众数（即，出现频率最高的元素）。</p><p>如果树中有不止一个众数，可以按 任意顺序 返回。</p><p>假定 BST 满足如下定义：</p><ul class="lvl-0"><li class="lvl-3"><p>结点左子树中所含节点的值 小于等于 当前节点的值</p></li><li class="lvl-3"><p>结点右子树中所含节点的值 大于等于 当前节点的值</p></li><li class="lvl-3"><p>左子树和右子树都是二叉搜索树</p></li></ul><pre class="line-numbers language-language-java"><code class="language-language-java">ArrayList<Integer> resList;int maxCount;int count;TreeNode pre;public int[] findMode(TreeNode root) {    resList = new ArrayList<>();    maxCount = 0;    count = 0;    pre = null;    findMode1(root);    int[] res = new int[resList.size()];    for(int i = 0; i < res.length; i++){        res[i] = resList.get(i);    }    return res;}public void findMode1(TreeNode root){    if(root == null) return;    findMode1(root.left);    int rootValue = root.val;    if(pre == null || rootValue != pre.val){        count = 1;    }else{        count++;    }    if(count > maxCount){        resList.clear();        resList.add(rootValue);        maxCount = count;    }else if(count == maxCount){        resList.add(rootValue);    }    pre = root;    findMode1(root.right);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="236-二叉树的最近公共祖先">236. 二叉树的最近公共祖先</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>思路总结:</p><ul class="lvl-0"><li class="lvl-3"><p>求最小公共祖先，需要从底向上遍历，那么二叉树，只能通过后序遍历（即：回溯）实现从低向上的遍历方式。</p></li><li class="lvl-3"><p>在回溯的过程中，必然要遍历整棵二叉树，即使已经找到结果了，依然要把其他节点遍历完，因为要使用递归函数的返回值（也就是代码中的left和right）做逻辑判断。</p></li><li class="lvl-3"><p>要理解如果返回值left为空，right不为空为什么要返回right，为什么可以用返回right传给上一层结果。</p></li></ul><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {    if(root == q || root == p || root == null) return root;    TreeNode left = lowestCommonAncestor(root.left, p, q);    TreeNode right = lowestCommonAncestor(root.right, p, q);    if(left != null && right != null) return root;    if(left != null && right == null) return left;        else if(left == null && right != null){return right;    }else{        return null;    } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="235-二叉搜索树的最近公共祖先">235. 二叉搜索树的最近公共祖先</h2><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>思路:其实只要从上到下遍历的时候，cur节点是数值在[p, q]区间中则说明该节点cur就是最近公共祖先了。</p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {    if(root == null) return root;    if(root.val > p.val && root.val > q.val){        TreeNode left = lowestCommonAncestor(root.left, p, q);        if(left != null) return left;    }    if(root.val < p.val && root.val < q.val){        TreeNode right = lowestCommonAncestor(root.right, p, q);        if(right != null) return right;    }    return root;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="701-二叉搜索树中的插入操作">701. 二叉搜索树中的插入操作</h2><p>给定二叉搜索树（BST）的根节点 root 和要插入树中的值 value ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p>注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 任意有效的结果 。</p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode insertIntoBST(TreeNode root, int val) {    if(root == null) return new TreeNode(val);    travel(root, val);    return root;}public void travel(TreeNode root, int val){    if(root.val >= val){        if(root.left != null){            travel(root.left, val);         }else{            root.left = new TreeNode(val);            return;        }    }else{        if(root.right != null){            travel(root.right, val);        }else{            root.right = new TreeNode(val);            return;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="450-删除二叉搜索树中的节点">450. 删除二叉搜索树中的节点</h2><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><p>首先找到需要删除的节点；如果找到了，删除它。</p><pre class="line-numbers language-language-java"><code class="language-language-java"> public TreeNode deleteNode(TreeNode root, int key) {  if (root == null) return root;  if (root.val == key) {    if (root.left == null) {      return root.right;    } else if (root.right == null) {      return root.left;    } else {      TreeNode cur = root.right;      while (cur.left != null) {        cur = cur.left;      }      cur.left = root.left;      root = root.right;      return root;    }  }  if (root.val > key) root.left = deleteNode(root.left, key);  if (root.val < key) root.right = deleteNode(root.right, key);  return root;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="669-修剪二叉搜索树">669. 修剪二叉搜索树</h2><p>给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。通过修剪二叉搜索树，使得所有节点的值在[low, high]中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 唯一的答案 。</p><p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p><p>思路:<br>若当前节点小于范围内的最小值,则递归右子树,并返回右子树符合范围的节点对于大于同理</p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode trimBST(TreeNode root, int low, int high) {    if(root == null) return root;    if(root.val < low){        return trimBST(root.right, low, high);    }    if(root.val > high){        return trimBST(root.left, low, high);    }    root.left = trimBST(root.left, low, high);    root.right = trimBST(root.right, low, high);    return root;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="108-将有序数组转换为二叉搜索树-简单">108. 将有序数组转换为二叉搜索树(简单)</h2><p>给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。</p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode sortedArrayToBST(int[] nums) {    return travel(nums, 0, nums.length - 1);}public TreeNode travel(int[] nums, int left, int right){    if(left > right) return null;    int mid = left + ((right - left) / 2);    TreeNode root = new TreeNode(nums[mid]);    root.left = travel(nums, left , mid - 1);    root.right = travel(nums, mid + 1, right);    return root;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="538-把二叉搜索树转换为累加树">538. 把二叉搜索树转换为累加树</h2><p>给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 node 的新值等于原树中大于或等于 node.val 的值之和。</p><pre class="line-numbers language-language-java"><code class="language-language-java">//反中序遍历    int pre;    public TreeNode convertBST(TreeNode root) {        pre = 0;        travel(root);        return root;    }    public void travel(TreeNode cur){        if(cur == null) return;        travel(cur.right);        cur.val += pre;        pre = cur.val;        travel(cur.left);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题笔记_第一周</title>
      <link href="/2022/08/04/leetcode-shua-ti-bi-ji-di-yi-zhou/"/>
      <url>/2022/08/04/leetcode-shua-ti-bi-ji-di-yi-zhou/</url>
      
        <content type="html"><![CDATA[<h1>栈与队列</h1><h2 id="1047-删除字符串中所有相邻重复项（简单）">1047.删除字符串中所有相邻重复项（简单）</h2><p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。</p><blockquote><p>输入：“abbaca”<br>输出：“ca”<br>解释：例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作，所以最后的字符串为 “ca”。</p></blockquote><p>使用deque栈/双指针，推荐使用双指针</p><p>思路：用top模拟栈顶指针，用res串模拟栈</p><pre class="line-numbers language-language-java"><code class="language-language-java">public String removeDuplicates(String s){StringBuffer res = new StringBuffer();int top = -1;for (int i = 0; i < s.length(); i++) {    if (top >= 0 && res.charAt(top) == s.charAt(i)){        res.deleteCharAt(top);        top--;    }else {        res.append(s.charAt(i));        top++;    }}return res.toString();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="150-逆波兰表达式求值（中等）">150.逆波兰表达式求值（中等）</h2><p>有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><blockquote><p>输入：tokens = [“2”,“1”,“+”,“3”,“*”]<br>输出：9<br>解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</p></blockquote><p>使用Deque</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int evalRPN(String[] tokens) {      Deque<Integer> deque = new LinkedList<>();      for (String i : tokens) {          if("+".equals(i)){              deque.addFirst(deque.removeFirst() + deque.removeFirst());          }else if ("-".equals(i)){              deque.addFirst((-deque.removeFirst()) + deque.removeFirst());          }else if ("*".equals(i)){              deque.addFirst(deque.removeFirst() * deque.removeFirst());          }else if ("/".equals(i)){              int after = deque.removeFirst();              int before = deque.removeFirst();              deque.addFirst(before / after);          }else{              deque.addFirst(Integer.parseInt(i));          }      }      return deque.removeFirst();  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="239-滑动窗口最大值（困难）">239.滑动窗口最大值（困难）</h2><p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p><p>返回 滑动窗口中的最大值 。</p><blockquote><p>输入：nums = [1,3,-1,-3,5,3,6,7], k = 3<br>输出：[3,3,5,5,6,7]</p></blockquote><p>思路：创建一个自己的队列类，其中使用双端队列实现poll、add、peek。在每次poll(num[i - k])时，判断是否是上一个窗口的最大值，若是，则弹出。在每次add(num[i])时，判断入队的元素是否比队尾元素大，若是则队尾元素删除，直到不比他小或到队头。</p><pre class="line-numbers language-language-java"><code class="language-language-java">class MyQueue{    Deque<Integer> deque = new LinkedList<>();    public void poll(int val){        if(!deque.isEmpty() && deque.peekFirst() == val){            deque.removeFirst();        }    }    public void add(int val){        while(!deque.isEmpty() && deque.peekLast() < val){            deque.removeLast();        }        deque.addLast(val);    }    public int peek(){        return deque.peekFirst();    }}public int[] maxSlidingWindow(int[] nums, int k) {    if(nums.length == 1) return nums;    int[] res = new int[nums.length - k + 1];    int num = 0;    MyQueue myQueue = new MyQueue();    for (int i = 0; i < k; i++) {        myQueue.add(nums[i]);    }    res[num++] = myQueue.peek();    for (int i = k; i < nums.length; i++) {        myQueue.poll(nums[i - k]);        myQueue.add(nums[i]);        res[num++] = myQueue.peek();    }    return res;}    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="347-前-K-个高频元素（中等）">347.前 K 个高频元素（中等）</h2><p>给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。</p><blockquote><p>输入: nums = [1,1,1,2,2,3], k = 2<br>输出: [1,2]</p></blockquote><p>思路：<br>1.使用map统计各个元素的出现频率</p><p><code>map.put(num, map.getOrDefault(num, 0) + 1)</code></p><p>2.使用PriorityQueue类型队列模拟小根堆<br><code>new PriorityQueue&lt;&gt;((o1, o2) -&gt;  o1.getValue() - o2.getValue())</code></p><p>用于统计频率前k高的元素，队列中一直保持size不超过k。</p><pre class="line-numbers language-language-java"><code class="language-language-java"> public int[] topKFrequent(int[] nums, int k) {   int[] res = new int[k];   HashMap<Integer, Integer> map = new HashMap<>();   for (int num : nums) {       map.put(num, map.getOrDefault(num, 0) + 1);   }   PriorityQueue<Map.Entry<Integer, Integer>> queue= new PriorityQueue<>(((o1, o2) -> o1.getValue() - o2.getValue()));   for (Map.Entry<Integer, Integer> entry :           queue) {       queue.offer(entry);       if(queue.size() > k){           queue.poll();       }   }   for (int i = k - 1; i >= 0; i--) {       res[i] = queue.poll().getValue();   }   return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>二叉树</h1><p>递归算法的三要素</p><ol><li class="lvl-3"><p>确认递归函数的参数和返回值</p></li><li class="lvl-3"><p>确定终止条件</p></li><li class="lvl-3"><p>确定单层递归的逻辑</p></li></ol><h2 id="144-二叉树的前序遍历（简单）">144.二叉树的前序遍历（简单）</h2><p>给你二叉树的根节点 root ，返回它节点值的 前序 遍历。</p><blockquote><p>输入：root = [1,null,2,3]<br>输出：[1,2,3]</p></blockquote><p>递归法:<br>思路：</p><ol><li class="lvl-3"><p>参数为root、res，无返回值</p></li><li class="lvl-3"><p>终止条件为节点为空</p></li><li class="lvl-3"><p>单层递归逻辑为根左右入队列</p></li></ol><pre class="line-numbers language-language-java"><code class="language-language-java"> public List<Integer> preorderTraversal(TreeNode root) {    ArrayList<Integer> res = new ArrayList<>();    preorder(root, res);    return res;}public void  preorder(TreeNode root, List<Integer> res){    if(root == null) return;    res.add(root.val);    preorder(root.left, res);    preorder(root.right, res);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代法:<br>前序遍历顺序：中-左-右，入栈顺序：中-右-左</p><pre class="line-numbers language-language-java"><code class="language-language-java">public List<Integer> preorderTravelsal(TreeNode root){    ArrayList<Integer> res = new ArrayList<>();    if(root == null) return res;    Stack<TreeNode> stack = new Stack<>();    stack.push(root);    while(!stack.isEmpty()){        TreeNode node = stack.pop();        res.add(node.val);        if(node.right != null) stack.push(node.right);        if(node.left != null) stack.push(node.left);    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="145-二叉树的中序遍历（简单）">145.二叉树的中序遍历（简单）</h2><p>递归法:<br>递归逻辑为左根右，其他与前序相同。迭代法:<br>中序遍历顺序: 左-中-右 入栈顺序： 左-右</p><pre class="line-numbers language-language-java"><code class="language-language-java">public List<Integer> inorderTravelsal(TreeNode root){   List<Integer> res = new ArrayList<>();   if (root == null) {       return res;   }   Stack<TreeNode> stack = new Stack<>();   TreeNode cur = root;   while (cur != null || !stack.isEmpty()) {       if (cur != null){           stack.push(cur);           cur = cur.left;       }else {           cur = stack.pop();           res.add(cur.val);           cur = cur.right;       }   }   return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="94-二叉树的后序遍历（简单）">94.二叉树的后序遍历（简单）</h2><p>递归：逻辑为左右根，其他与前序相同。迭代：后序遍历顺序 左-右-中 入栈顺序：中-左-右 出栈顺序：中-右-左， 最后翻转结果</p><pre class="line-numbers language-language-java"><code class="language-language-java">public List<Integer> postorderTraversal(TreeNode root) {    List<Integer> result = new ArrayList<>();    if (root == null){        return result;    }    Stack<TreeNode> stack = new Stack<>();    stack.push(root);    while (!stack.isEmpty()){        TreeNode node = stack.pop();        result.add(node.val);        if (node.left != null){            stack.push(node.left);        }        if (node.right != null){            stack.push(node.right);        }    }    Collections.reverse(result);    return result;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="102-二叉树的层序遍历（中等）">102. 二叉树的层序遍历（中等）</h2><p>给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。</p><blockquote><p>输入：root = [3,9,20,null,null,15,7]<br>输出：[[3],[9,20],[15,7]]</p></blockquote><p>递归思路：每当传入checkDeep一个值的时候，则将增加本层数，并且，将值传回上一层的list的个体之中。与之同时，要对比res队列的大小是否比deep小，若小，则增加一个list个体。</p><pre class="line-numbers language-language-java"><code class="language-language-java">//存储每一层的ListList<List<Integer>> levelRes = new ArrayList<>();public List<List<Integer>> levelOrder(TreeNode root) {    checkDeep(root, 0);    return levelRes;}public void checkDeep(TreeNode node, Integer deep){    if(node == null) return;    deep++;    if (levelRes.size() < deep){        //层级增加时，list的Item也增加        List<Integer> item = new ArrayList<>();        levelRes.add(item);    }    levelRes.get(deep - 1).add(node.val);    checkDeep(node.left, deep);    checkDeep(node.right, deep);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代思路：首先往队列中放入当前节点，将当前所有节点的子节点放入队列中，然后排出，则为一层</p><pre class="line-numbers language-language-java"><code class="language-language-java">List<List<Integer>> levelRes = new ArrayList<>();public void checkDeep(TreeNode node){    if(node == null) return;    Deque<TreeNode> deque = new LinkedList<>();    deque.offerLast(node);    while(!deque.isEmpty()){        List<Integer> itemList = new ArrayList<>();        int len = deque.size();        //将deque中的值一个一个取出来        while (len > 0){            TreeNode tmpNode = deque.pollFirst();            itemList.add(tmpNode.val);            if (tmpNode.left != null) deque.offerLast(tmpNode.left);            if (tmpNode.right != null) deque.offerLast(tmpNode.right);            len--;        }        levelRes.add(itemList);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="226-翻转二叉树（简单）">226.翻转二叉树（简单）</h2><p>给你一棵二叉树的根节点 root ，翻转这棵二叉树，并返回其根节点。</p><p><img src="https://img-blog.csdnimg.cn/a00f3013f1c64f0a8d74f0ba94971534.png" alt=""></p><blockquote><p>输入：root = [4,2,7,1,3,6,9]<br>输出：[4,7,2,9,6,3,1]</p></blockquote><p>思路：把每个节点的孩子左右翻转一下（可用前序遍历/后序遍历）</p><pre class="line-numbers language-language-java"><code class="language-language-java">public TreeNode invertTree(TreeNode root) {    if (root == null) return null;    invertTree(root.left);    invertTree(root.right);    swapChildren(root);    return root;}public void swapChildren(TreeNode root){    TreeNode temp = root.left;    root.left = root.right;    root.right = temp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="101-对称二叉树（简单）">101. 对称二叉树（简单）</h2><p>给你一个二叉树的根节点 root ， 检查它是否轴对称</p><blockquote><p>输入：root = [1,2,2,3,4,4,3]<br>输出：true</p></blockquote><p>迭代法：使用双端队列，入栈顺序为左节点的左右孩子，右节点的左右孩子。可用单端队列代替</p><pre class="line-numbers language-language-java"><code class="language-language-java">Deque<TreeNode> deque = new LinkedList<>();    deque.offerFirst(root.left);    deque.offerLast(root.right);    while (!deque.isEmpty()) {        TreeNode leftNode = deque.pollFirst();        TreeNode rightNode = deque.pollLast();        if (leftNode == null && rightNode == null) {            continue;        }        if (leftNode == null || rightNode == null || leftNode.val != rightNode.val){            return false;        }        deque.offerFirst(leftNode.left);        deque.offerFirst(leftNode.right);        deque.offerLast(rightNode.right);        deque.offerLast(rightNode.left);    }    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归法：</p><pre class="line-numbers language-language-java"><code class="language-language-java">public boolean isSymmetric(TreeNode root) {    if(root == null) return false;    return compare(root.left, root.right);}public boolean compare(TreeNode left, TreeNode right){    if(left == null && right==null){        return true;    }else if(left == null && right != null){        return false;    }else if (left != null && right == null) {        return false;    }else if (left.val != right.val){        return false;    }    boolean outside = compare(left.left, right.right);    boolean inside = compare(left.right, right.left);    return outside && inside;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="104-二叉树的最大深度（简单）">104. 二叉树的最大深度（简单）</h2><p>给定一个二叉树，找出其最大深度。二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><blockquote><p>给定二叉树 [3,9,20,null,null,15,7]</p></blockquote><p>因为二叉树的最大深度是根节点的高度，所以求根节点的高度即可递归法：类似于前序遍历</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int getDeepRecursion(TreeNode node){     if (node == null) return 0;     int leftDepth = getDeep(node.left);     int rightDepth = getDeep(node.right);     int deepth = 1 + Math.max(leftDepth, rightDepth);     return deepth;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代法：使用队列，复现层次遍历的迭代实现的方法。将节点放入队头，并每次</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int getDeepIteration(TreeNode node){if(node == null) return 0;int depth = 0;Deque<TreeNode> deque = new LinkedList<>();deque.offerFirst(node);while(!deque.isEmpty()){int len = deque.size();depth++;for(int i = 0; i < len; i++){TreeNode tmp = deque.pollFirst();if(tmp.left != null) deque.add(tmp.left);if(tmp.right != null) deque.add(tmp.right);}}return depth;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上求二叉树的最大深度应为：</p><pre class="line-numbers language-language-java"><code class="language-language-java">int res;public void getDepth(TreeNode node, int depth){res = depth > res ? depth : res;if(node.left == null && node.right == null) return;if(node.left != null){depth++;getDepth(node.left, depth);depth--;}if(node.right != null){depth++;getDepth(node.right, depth);depth--;}return;}int maxDepth(TreeNode ){res = 0;if(root == null) return res;getDepth(root, 1);return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="559-N-叉树的最大深度（简单）">559. N 叉树的最大深度（简单）</h2><p>给定一个 N 叉树，找到其最大深度。最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔（请参见示例）。</p><blockquote><p>输入：root = [1,null,3,2,4,null,5,6]<br>输出：3</p></blockquote><p>递归法：将每个</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int maxDepthNtreeRecursion(Node root) {if(root == null) return 0;int depth = 0;if(root.children != null){for(Node child : root.children){depth = Math.max(depth, maxDepth(child);}}return depth++;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代法：使用层序遍历的思想</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int maxDepthNtreeIteration(Node root){    if (root == null) return 0;    int depth = 0;    Deque<Node> deque = new LinkedList<>();    deque.offerLast(root);    while (!deque.isEmpty()){        depth++;        int len = deque.size();        while (len > 0){            Node tmp = deque.pollFirst();            for (int i = 0; i < tmp.children.size(); i++) {                if (tmp.children.get(i) != null){                    deque.offerLast(tmp.children.get(i));                }            }            len--;        }    }    return depth;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="111-二叉树的最小深度（简单）">111. 二叉树的最小深度（简单）</h2><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><blockquote><p>输入：root = [3,9,20,null,null,15,7]<br>输出：2</p></blockquote><p>迭代法：</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int minDepthCursion(TreeNode root){    if (root == null) return 0;    if (root.left == null && root.right != null) {return minDepthCursion(root.right) + 1;}        if (root.left != null && root.right == null) {return minDepthCursion(root.left) + 1;}    return 1 + Math.min(rightDepth, leftDepth);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归法：</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int minDepethInteration(TreeNode root){    if (root == null) return 0;    int depth = 0;    Deque<TreeNode> deque = new LinkedList<>();    deque.offerLast(root);    while (!deque.isEmpty()) {        depth++;        int len = deque.size();        for (int i = 0; i < len; i++) {            TreeNode tmp = deque.pollFirst();            if (tmp.left != null && tmp.right == null) deque.offerLast(tmp.left);            if (tmp.left == null && tmp.right != null) deque.offerLast(tmp.right);            if (tmp.left == null && tmp.right == null) return depth;        }    }    return depth;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="222-完全二叉树的节点个数（中等）">222. 完全二叉树的节点个数（中等）</h2><p>给你一棵 完全二叉树 的根节点 root ，求出该树的节点个数。</p><blockquote><p>输入：root = [1,2,3,4,5,6]<br>输出：6</p></blockquote><p>迭代法：</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int countNodesIteration(TreeNode root){    if (root == null) return 0;    int res = 0;    Deque<TreeNode> deque = new LinkedList<>();    deque.offerLast(root);    while (!deque.isEmpty()) {        int len = deque.size();        for (int i = 0; i < len; i++) {            TreeNode tmp = deque.pollFirst();            res++;            if (tmp.left != null) deque.offerLast(tmp.left);            if (tmp.right != null) deque.offerLast(tmp.right);        }    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递归法：</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int countNodesCursion(TreeNode root) {    if (root == null) return 0;    int leftCount = countNodesCursion(root.left);    int rightCount = countNodesCursion(root.right);    int nodeCount = leftCount + rightCount + 1;    return nodeCount;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>符合满二叉树的写法：注意 ：&lt;&lt; : 左移运算符，num &lt;&lt; 1,相当于num乘以2｜｜&gt;&gt; : 右移运算符，num &gt;&gt; 1,相当于num除以2<br>满二叉树的节点数为2^depth - 1<br>即：10 &gt;&gt; 3  = 10  /  (2 * 2 * 2)， 10 &lt;&lt; 3 = 10 * ( 2 * 2 * 2)<br>思路：因为它输入已经确定是完全二叉树，所以只需判断最左边的深度是否与最右边的深度一致，若一致则为满二叉树，可用公式 2^depth - 1 计算。</p><pre class="line-numbers language-language-java"><code class="language-language-java">public int countNodesFullTree(TreeNode root){     if (root == null) return 0;     int leftDepth = getDepth(root.left);     int rightDepth = getDepth(root.right);     if (leftDepth == rightDepth){//左子树为满二叉树         return (1 << leftDepth) + countNodesFullTree(root.right);     }else {//右子树为满二叉树         return (1 << rightDepth) + countNodesFullTree(root.left);     } } //只判断最左边的 private int getDepth(TreeNode root){     int depth = 0;     while (root != null){         root = root.left;         depth++;     }     return depth; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="110-平衡二叉树（简单）">110. 平衡二叉树（简单）</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><p>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</p><blockquote><p>输入：root = [3,9,20,null,null,15,7]<br>输出：true</p></blockquote><p>思路：比较高度，需要使用后序遍历。<br>1.递归参数及返回值：</p><pre class="line-numbers language-language-java"><code class="language-language-java">int getHeight(TreeNode node)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.终止条件：</p><pre class="line-numbers language-language-java"><code class="language-language-java">node == null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.单层递归逻辑判断左右子树的高度，若不同则返回-1 ，若相同则返回当前当前二叉树高度。</p><p>最终代码：（PS： abs是返回绝对值）</p><pre class="line-numbers language-language-java"><code class="language-language-java">public boolean isBalanced(TreeNode root) {        return getHeight(root) != -1;    }    public int getHeight(TreeNode node){        if(node == null) return 0;        int leftHeight = getHeight(node.left);        if(leftHeight == -1) return -1;        int rightHeight = getHeight(node.right);        if(leftHeight == -1) return -1;        if(Math.abs(leftHeight - rightHeight) > 1){            return -1;        }        return Math.max(leftHeight, rightHeight) + 1;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="257-二叉树的所有路径（简单）">257. 二叉树的所有路径（简单）</h2><p>不止用了递归，还用了回溯给定一个二叉树，返回所有从根节点到叶子节点的路径。</p><blockquote><p>输入：root = [1,2,3,null,5]<br>输出：[“1-&gt;2-&gt;5”,“1-&gt;3”]</p></blockquote><pre class="line-numbers language-language-java"><code class="language-language-java"> public List<String> binaryTreePathsCursion(TreeNode root){    List<String> res = new ArrayList<>();    if (root == null) return res;    List<Integer> paths = new ArrayList<>();    traversal(root, paths, res);    return res;}private void traversal(TreeNode root, List<Integer> paths, List<String> res){    paths.add(root.val);    if (root.left == null && root.right == null){        StringBuilder sb = new StringBuilder();        for (int i = 0; i < paths.size() - 1; i++) {            sb.append(paths.get(i)).append("->");        }        sb.append(paths.get(paths.size() - 1));        res.add(sb.toString());        return;    }    if (root.left != null){        traversal(root.left, paths, res);        paths.remove(paths.size() - 1);    }    if (root.right != null){        traversal(root.right, paths, res);        paths.remove(paths.size() - 1);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL_数据页、b+树索引</title>
      <link href="/2022/08/04/mysql-shu-ju-ye-b-shu-suo-yin/"/>
      <url>/2022/08/04/mysql-shu-ju-ye-b-shu-suo-yin/</url>
      
        <content type="html"><![CDATA[<h1>InnoDB记录存储结构</h1><blockquote><p>除InnoDB以外的常用引擎,还有MyISAM</p></blockquote><p>页是磁盘和内存中交互的基本单位,也是存储空间的基本单位,默认大小为16kb</p><h2 id="COMPACT行格式">COMPACT行格式:</h2><img src="https://img-blog.csdnimg.cn/d047d5f857834718b5f27f7470074d31.png" alt="COMPACT行格式示意图" style="zoom:67%;">记录的额外信息:变长字段长度列表、NULL值列表、记录信息;<ol><li class="lvl-3"><p>变长字段列表:(如varchar等)因<code>存储多少字节的数据是不固定的</code>,所以分为两部分:真正的数据、占用的字节数</p></li></ol><blockquote><p><mark>按照列的顺序逆序存放</mark> 最大存储数M * 占用字节数W  &lt;= 255, 则使用1字节表示占用的字节数,其中若&gt;255, 若实际占用的&lt;=127则还用1字节,否则2字节.<br>InnoDB读取记录时候先看表结构,入欧工允许存储的最大字节数部大雨255可以认为只是用1字节来表示真是数据占用的字节数</p></blockquote><ol start="2"><li class="lvl-3"><p>NULL值列表:首先统计允许存储NULL的列有哪些,若没有则NULL值列表页不存在了</p></li></ol><h2 id="REDUNDANT行格式">REDUNDANT行格式:</h2><img src="https://img-blog.csdnimg.cn/d1fd92ac892b4863aa2a8df3cd4e5800.png" alt="REDUNDANT行格式示意图" style="zoom: 50%;"><p>5.0之前的了</p><h2 id="DYNAMIC和COMPRESSED行格式">DYNAMIC和COMPRESSED行格式</h2><p>类似于COMPACT行格式,不过处理溢出时的决策不同,不是只把溢出的数据放到原先的溢出页中了,而是直接将所有的数据存储在溢出页,然后直接指向地址,另外COMPRESSED回采用压缩算法对页面进行压缩.</p><h1>InnoDB数据页结构</h1><p>页的结构图:<br><img src="https://img-blog.csdnimg.cn/f86f4b1000fe458e803aa188e9802961.png" alt="InnoDB数据页结构示意图" style="zoom: 33%;"></p><p>一开始生成页的时候,没有User Records的部分,每当插入一条记录时,会从Free Space中申请一个记录大小的空间,并分配.</p><p>记录头:<br><img src="https://img-blog.csdnimg.cn/50d419dec8a341fa83250d5eb23a8ead.png" alt="COMPACT行格式示意图" style="zoom: 33%;"><br>其中<code>n_owned</code>是带头大哥记录的是该组中所有的记录条数，小弟记录的都为0。<code>next_record</code>代表从当前记录的真实数据到下一条记录的真实数据，正数代表在后面，附属代表在前面(按主键值排序)，而且想做读取就是记录头信息，向右读区是真实数据。<code>Supremum</code>主键值最大的用户记录的下一条记录<code>Infimum</code>记录的下一条记录是主键值最小的用户记录</p><blockquote><p>变长字段长度列表、NULL值列表中的信息逆序存放的原因：可以是使得记录中位置靠前的字段和他们对应的字段长度信息在内存中的距离更近，这可能会提高高速缓存的命中率。</p></blockquote><h2 id="Page-Directory页目录">Page Directory页目录</h2><p>1、将所有的<code>有效正常记录</code>（包括Infimum和Supremum）划分为几个组<br>2、每个组的最后一条记录计为<code>“带头大哥”</code><br>3、每个组最后一条数据的地址偏移量单独提取出来，按顺序存储到靠页尾部的地方，这个地方就是页目录。并且将之称为<code>槽（slot）</code>，占用2字节</p><blockquote><p>Infimum记录所在分组只能有1条记录<br>Supremum记录的所在的分组只能在1-8条剩下的记录范围只能是4-8条</p></blockquote><p>步骤：1.只有两个槽Infi，Supre 2.找到比插入大但差值最小的记录，槽对应的n_owned+1<br>3.记录数为8后，再插入时拆分成两个组，一个4一个5，新增槽，记录最大的记录的偏移量</p><p>采用二分法快速寻找槽</p><h2 id="PageHeader页面头部">PageHeader页面头部</h2><img src="https://img-blog.csdnimg.cn/5a2e1608916f4ef7bfa0cabad3fd6c69.png" alt="描述记录的状态信息" style="zoom:33%;"><h2 id="File-Header文件头部">File Header文件头部</h2><p>通用于各种类型的页，都会将其作为第一个组成部分，描述通用于各种页的信息。<img src="https://img-blog.csdnimg.cn/d9b5c87e14e74396ac272b8929f55daf.png" alt="File Header的结构及描述" style="zoom:33%;"><br>其中：<br>FIL_PAGE_SPACE_OR_CHKSUM：相当于当前页面的校验和。<br>FIL_PAGE_OFFSET：页号，通过它定位一个页<br>FILE_PAGE_TYPE：页的类型</p><blockquote><p>以下的开头前缀都是FIL_PAGE_<br>TYPE_ALLOCATED 最新分配没使用<br>UNDO_LOG undo日志页<br>INODE 存储段的信息<br>IBUF_FREE_LIST Change Buffer空闲列表<br>IBUF_BITMAP Change Buffer的一些属性<br>TYPE_SYS 系统数据<br>TYPE_TRX_SYS 事务系统数据<br>TYPE_FSP_HDR 表空间头部信息<br>TYPE_XDES 存储区的一些信息<br>TYPE_BLOB 溢出页<br>INDEX  索引页 即数据页。可以组成一个双向链表</p></blockquote><h2 id="File-Trailer-文件尾部">File Trailer 文件尾部</h2><p>File Trailer由8个字节组成，可以分成2个小部分</p><ul class="lvl-0"><li class="lvl-2"><p>前4个字节代表校验和，与File Header中的校验和对应。每次页面在内存中修改时，刷新之前将校验和算出来，File Header会首先刷新到磁盘中，然后校验和也会被写到页的尾部，若刷新成功那么校验和是一致的，不同则错误</p></li><li class="lvl-2"><p>对应最后修改时的LSN的后4个字节（日志序列号）与Header中的FIL_PAGE_LSN后4哥字节相同，用于完整性。</p></li></ul><h1>B+树索引</h1><h2 id="InnoDB的索引方案">InnoDB的索引方案</h2><p>聚簇索引（ID排序）二级索引（别的列排序）联合索引（多个列排序）</p><ol><li class="lvl-3"><p>B+树索引的根节点不会移动（页号不会改变）</p></li><li class="lvl-3"><p>二级索引的内节点记录的内容实际上由3部分组成：<code>索引列的值、主键值、页号</code></p></li><li class="lvl-3"><p>一个页面至少容纳两条记录</p></li></ol><h2 id="MyISAM索引方案">MyISAM索引方案</h2><p>将索引和数据分开存储将记录按照<mark>插入顺序</mark>存放再一个文件中（数据文件），不划分页，通过行号快速访问。将索引信息单独存放在另一个文件中，为表的主键单独创建一个索引，在索引的叶子节点中是<mark>主键值与行号的组合。</mark>即<mark>MyISAM中建立的索引相当于全部都是二级索引。</mark></p><h2 id="MySQL中创建和删除索引的语句">MySQL中创建和删除索引的语句</h2><p>ALTER TABLE 表名 ADD/DROP （INDEX｜KEY）索引名</p><h1>B+树索引的使用</h1><p>B+树索引在空间和时间上都有代价。可以用于减少需要扫描的记录数量，也可以用于排序和分组。</p><blockquote><p>一般只为WHERE中的列、连接子句中的连接列，活着出现在ORDER BY 或 GROUP BY</p></blockquote><p>注意事项：</p><ul class="lvl-0"><li class="lvl-2"><p>只为用于搜索、排序或分组的列创建索引</p></li><li class="lvl-2"><p>不重复的数据占重比大时使用（过多可以重复的列，有太多的回表操作）</p></li><li class="lvl-2"><p>索引列的类型尽量小（IO消耗少）</p></li><li class="lvl-2"><p>只为索引前缀建立索引，减小占用的存储空间（可以只保留字符串的前10个字符）</p></li><li class="lvl-2"><p>使用覆盖索引进行查询，避免回表操作，（在查询列表中只保留索引列）</p></li><li class="lvl-2"><p>让索引列以列名出现在搜索条件中（key2 * 2 &lt;4 变为 key2 &lt; 4/2）</p></li><li class="lvl-2"><p>减少聚簇索引发生页面分裂，让主键拥有AUTO_INCREMENT属性（减少插入时的损耗）</p></li><li class="lvl-2"><p>定位并删除表中的冗余和重复索引（已经有联合索引，那么单独索引就可以看成冗余索引）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
